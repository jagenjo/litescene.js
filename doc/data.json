{
    "project": {},
    "files": {
        "../src/components/VRCameraController.js": {
            "name": "../src/components/VRCameraController.js",
            "modules": {},
            "classes": {
                "LS.Components.VRCameraController": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/animator.js": {
            "name": "../src/components/animator.js",
            "modules": {},
            "classes": {
                "LS.Components.Rotator": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/camera.js": {
            "name": "../src/components/camera.js",
            "modules": {},
            "classes": {
                "LS.Components.Camera": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/cameraController.js": {
            "name": "../src/components/cameraController.js",
            "modules": {},
            "classes": {
                "LS.Components.CameraController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/cameraDirector.js": {
            "name": "../src/components/cameraDirector.js",
            "modules": {},
            "classes": {
                "LS.Components.CameraDirector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/cameraFX.js": {
            "name": "../src/components/cameraFX.js",
            "modules": {},
            "classes": {
                "LS.Components.CameraFX": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/canvas3d.js": {
            "name": "../src/components/canvas3d.js",
            "modules": {},
            "classes": {
                "LS.Components.Canvas3D": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/customData.js": {
            "name": "../src/components/customData.js",
            "modules": {},
            "classes": {
                "LS.Components.CustomData": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/followNode.js": {
            "name": "../src/components/followNode.js",
            "modules": {},
            "classes": {
                "LS.Components.FollowNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/frameFX.js": {
            "name": "../src/components/frameFX.js",
            "modules": {},
            "classes": {
                "LS.Components.FrameFX": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/geometricPrimitive.js": {
            "name": "../src/components/geometricPrimitive.js",
            "modules": {},
            "classes": {
                "LS.Components.GeometricPrimitive": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/graphComponents.js": {
            "name": "../src/components/graphComponents.js",
            "modules": {},
            "classes": {
                "LS.Components.GraphComponent": 1,
                "LS.Components.FXGraphComponent": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/interactiveController.js": {
            "name": "../src/components/interactiveController.js",
            "modules": {},
            "classes": {
                "LS.InteractiveController": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/components/knob.js": {
            "name": "../src/components/knob.js",
            "modules": {},
            "classes": {
                "LS.Knob": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/light.js": {
            "name": "../src/components/light.js",
            "modules": {},
            "classes": {
                "LS.Components.Light": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/lightFX.js": {
            "name": "../src/components/lightFX.js",
            "modules": {},
            "classes": {
                "LS.Components.LightFX": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/linesRenderer.js": {
            "name": "../src/components/linesRenderer.js",
            "modules": {},
            "classes": {
                "LS.Components.LinesRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/meshRenderer.js": {
            "name": "../src/components/meshRenderer.js",
            "modules": {},
            "classes": {
                "LS.Components.MeshRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/nodeManipulator.js": {
            "name": "../src/components/nodeManipulator.js",
            "modules": {},
            "classes": {
                "LS.Components.NodeManipulator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/particles.js": {
            "name": "../src/components/particles.js",
            "modules": {},
            "classes": {
                "LS.Particle": 1,
                "LS.Components.ParticlesEmissor": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1,
                "LS.Components": 1
            }
        },
        "../src/components/playAnimation.js": {
            "name": "../src/components/playAnimation.js",
            "modules": {},
            "classes": {
                "LS.Components.PlayAnimation": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/poser.js": {
            "name": "../src/components/poser.js",
            "modules": {},
            "classes": {
                "LS.Components.Poser": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/realtimeReflector.js": {
            "name": "../src/components/realtimeReflector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/components/reflectionProbe.js": {
            "name": "../src/components/reflectionProbe.js",
            "modules": {},
            "classes": {
                "LS.Components.RealtimeReflector": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/sceneInclude.js": {
            "name": "../src/components/sceneInclude.js",
            "modules": {},
            "classes": {
                "LS.Components.SceneInclude": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/script.js": {
            "name": "../src/components/script.js",
            "modules": {},
            "classes": {
                "LS.Components.Script": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/skinDeformer.js": {
            "name": "../src/components/skinDeformer.js",
            "modules": {},
            "classes": {
                "LS.Components.SkinDeformer": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/skinnedMeshRenderer.js": {
            "name": "../src/components/skinnedMeshRenderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/components/skybox.js": {
            "name": "../src/components/skybox.js",
            "modules": {},
            "classes": {
                "LS.Components.Skybox": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/spline.js": {
            "name": "../src/components/spline.js",
            "modules": {},
            "classes": {
                "LS.Components.Spline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/svgRenderer.js": {
            "name": "../src/components/svgRenderer.js",
            "modules": {},
            "classes": {
                "LS.Components.SVGRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/target.js": {
            "name": "../src/components/target.js",
            "modules": {},
            "classes": {
                "LS.Components.Target": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/transform.js": {
            "name": "../src/components/transform.js",
            "modules": {},
            "classes": {
                "LS.Components.Transform": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/helpers/FXstack.js": {
            "name": "../src/helpers/FXstack.js",
            "modules": {},
            "classes": {
                "LS.Components.FXStack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/helpers/animationCurve.js": {
            "name": "../src/helpers/animationCurve.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/helpers/spatialContainer.js": {
            "name": "../src/helpers/spatialContainer.js",
            "modules": {},
            "classes": {
                "LS.SpatialContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/helpers/tween.js": {
            "name": "../src/helpers/tween.js",
            "modules": {},
            "classes": {
                "LS.Tween": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/graphMaterial.js": {
            "name": "../src/materials/graphMaterial.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/materials/material.js": {
            "name": "../src/materials/material.js",
            "modules": {},
            "classes": {
                "LS.Material": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/newStandardMaterial.js": {
            "name": "../src/materials/newStandardMaterial.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/shaderMaterial.js": {
            "name": "../src/materials/shaderMaterial.js",
            "modules": {},
            "classes": {
                "LS.ShaderMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/standardMaterial.js": {
            "name": "../src/materials/standardMaterial.js",
            "modules": {},
            "classes": {
                "LS.StandardMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/surfaceMaterial.js": {
            "name": "../src/materials/surfaceMaterial.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/materials/unityMaterial.js": {
            "name": "../src/materials/unityMaterial.js",
            "modules": {},
            "classes": {
                "LS.UnityMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/render/debug.js": {
            "name": "../src/render/debug.js",
            "modules": {},
            "classes": {
                "LS.DebugRender": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/render/draw.js": {
            "name": "../src/render/draw.js",
            "modules": {},
            "classes": {
                "LS.Draw": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/render/renderFrameContext.js": {
            "name": "../src/render/renderFrameContext.js",
            "modules": {},
            "classes": {
                "LS.RenderFrameContext": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/render/renderInstance.js": {
            "name": "../src/render/renderInstance.js",
            "modules": {},
            "classes": {
                "LS.RenderInstance": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/render/renderSettings.js": {
            "name": "../src/render/renderSettings.js",
            "modules": {},
            "classes": {
                "LS.RenderSettings": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/render/renderState.js": {
            "name": "../src/render/renderState.js",
            "modules": {},
            "classes": {
                "LS.RenderState": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/render/renderer.js": {
            "name": "../src/render/renderer.js",
            "modules": {},
            "classes": {
                "LS.Renderer": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/resources/animation.js": {
            "name": "../src/resources/animation.js",
            "modules": {},
            "classes": {
                "LS.Animation": 1,
                "LS.Animation.Take": 1,
                "LS.Animation.Track": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1,
                "LS.Animation": 1
            }
        },
        "../src/resources/pack.js": {
            "name": "../src/resources/pack.js",
            "modules": {},
            "classes": {
                "LS.Pack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/resources/prefab.js": {
            "name": "../src/resources/prefab.js",
            "modules": {},
            "classes": {
                "LS.Prefab": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/resources/resource.js": {
            "name": "../src/resources/resource.js",
            "modules": {},
            "classes": {
                "LS.Resource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/resources/shaderCode.js": {
            "name": "../src/resources/shaderCode.js",
            "modules": {},
            "classes": {
                "LS.ShaderCode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/resources/shaderGraph.js": {
            "name": "../src/resources/shaderGraph.js",
            "modules": {},
            "classes": {
                "LS.ShaderGraph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/utils/lscript.js": {
            "name": "../src/utils/lscript.js",
            "modules": {},
            "classes": {
                "LS.LScript": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/utils/wbin.js": {
            "name": "../src/utils/wbin.js",
            "modules": {},
            "classes": {
                "LS.WBin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/component.js": {
            "name": "../src/component.js",
            "modules": {},
            "classes": {
                "LS.Component": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/componentContainer.js": {
            "name": "../src/componentContainer.js",
            "modules": {},
            "classes": {
                "LS.ComponentContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/compositePattern.js": {
            "name": "../src/compositePattern.js",
            "modules": {},
            "classes": {
                "LS.CompositePattern": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/core.js": {
            "name": "../src/core.js",
            "modules": {
                "LS": 1
            },
            "classes": {
                "LS.LS": 1,
                "LSQ": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/defines.js": {
            "name": "../src/defines.js",
            "modules": {},
            "classes": {
                "LS.Ray": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/formats.js": {
            "name": "../src/formats.js",
            "modules": {},
            "classes": {
                "LS.Formats": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/gui.js": {
            "name": "../src/gui.js",
            "modules": {},
            "classes": {
                "LS.GUI": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/input.js": {
            "name": "../src/input.js",
            "modules": {},
            "classes": {
                "LS.Input": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/network.js": {
            "name": "../src/network.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/physics.js": {
            "name": "../src/physics.js",
            "modules": {},
            "classes": {
                "LS.Collision": 1,
                "LS.PhysicsInstance": 1,
                "LS.Physics": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/picking.js": {
            "name": "../src/picking.js",
            "modules": {},
            "classes": {
                "LS.Picking": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/player.js": {
            "name": "../src/player.js",
            "modules": {},
            "classes": {
                "LS.Player": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/project.js": {
            "name": "../src/project.js",
            "modules": {},
            "classes": {
                "LS.Project": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/resourcesManager.js": {
            "name": "../src/resourcesManager.js",
            "modules": {},
            "classes": {
                "LS.ResourcesManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/scene.js": {
            "name": "../src/scene.js",
            "modules": {},
            "classes": {
                "LS.SceneTree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/sceneNode.js": {
            "name": "../src/sceneNode.js",
            "modules": {},
            "classes": {
                "LS.SceneNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/shadersManager.js": {
            "name": "../src/shadersManager.js",
            "modules": {},
            "classes": {
                "LS.ShadersManager": 1,
                "LS.ShaderQuery": 1,
                "LS.GLSLCode": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/utils.js": {
            "name": "../src/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        }
    },
    "modules": {
        "LS": {
            "name": "LS",
            "submodules": {},
            "elements": {},
            "classes": {
                "LS.Components.VRCameraController": 1,
                "LS.Components.Rotator": 1,
                "LS.Components.Camera": 1,
                "LS.Components.CameraController": 1,
                "LS.Components.CameraDirector": 1,
                "LS.Components.CameraFX": 1,
                "LS.Components.Canvas3D": 1,
                "LS.Components.CustomData": 1,
                "LS.Components.FollowNode": 1,
                "LS.Components.FrameFX": 1,
                "LS.Components.GeometricPrimitive": 1,
                "LS.Components.GraphComponent": 1,
                "LS.Components.FXGraphComponent": 1,
                "LS.InteractiveController": 1,
                "LS.Knob": 1,
                "LS.Components.Light": 1,
                "LS.Components.LightFX": 1,
                "LS.Components.LinesRenderer": 1,
                "LS.Components.MeshRenderer": 1,
                "LS.Components.NodeManipulator": 1,
                "LS.Particle": 1,
                "LS.Components.ParticlesEmissor": 1,
                "LS.Components.PlayAnimation": 1,
                "LS.Components.Poser": 1,
                "LS.Components.RealtimeReflector": 1,
                "LS.Components.SceneInclude": 1,
                "LS.Components.Script": 1,
                "LS.Components.SkinDeformer": 1,
                "LS.Components.Skybox": 1,
                "LS.Components.Spline": 1,
                "LS.Components.SVGRenderer": 1,
                "LS.Components.Target": 1,
                "LS.Components.Transform": 1,
                "LS.Components.FXStack": 1,
                "LS.SpatialContainer": 1,
                "LS.Tween": 1,
                "LS.Material": 1,
                "LS.StandardMaterial": 1,
                "LS.ShaderMaterial": 1,
                "LS.UnityMaterial": 1,
                "LS.DebugRender": 1,
                "LS.Draw": 1,
                "LS.RenderFrameContext": 1,
                "LS.RenderInstance": 1,
                "LS.RenderSettings": 1,
                "LS.RenderState": 1,
                "LS.Renderer": 1,
                "LS.Animation": 1,
                "LS.Animation.Take": 1,
                "LS.Animation.Track": 1,
                "LS.Pack": 1,
                "LS.Prefab": 1,
                "LS.Resource": 1,
                "LS.ShaderCode": 1,
                "LS.ShaderGraph": 1,
                "LS.LScript": 1,
                "LS.WBin": 1,
                "LS.Component": 1,
                "LS.ComponentContainer": 1,
                "LS.CompositePattern": 1,
                "LS.LS": 1,
                "LSQ": 1,
                "LS.Ray": 1,
                "LS.Formats": 1,
                "LS.GUI": 1,
                "LS.Input": 1,
                "LS.Collision": 1,
                "LS.PhysicsInstance": 1,
                "LS.Physics": 1,
                "LS.Picking": 1,
                "LS.Player": 1,
                "LS.Project": 1,
                "LS.ResourcesManager": 1,
                "LS.SceneTree": 1,
                "LS.SceneNode": 1,
                "LS.ShadersManager": 1,
                "LS.ShaderQuery": 1,
                "LS.GLSLCode": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            },
            "tag": "module",
            "file": "../src/shadersManager.js",
            "line": 842,
            "description": "LS is the global scope for the global functions and containers of LiteScene"
        }
    },
    "classes": {
        "LS.Components.VRCameraController": {
            "name": "LS.Components.VRCameraController",
            "shortname": "LS.Components.VRCameraController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/VRCameraController.js",
            "line": 3,
            "description": "This component allow to integrate with WebVR to use VR Headset",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Rotator": {
            "name": "LS.Components.Rotator",
            "shortname": "LS.Components.Rotator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/animator.js",
            "line": 1,
            "description": "Rotator rotate a mesh over time",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Camera": {
            "name": "LS.Components.Camera",
            "shortname": "LS.Components.Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/camera.js",
            "line": 3,
            "description": "Camera contains the info about a camera (matrices, near far planes, clear color, etc)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.CameraController": {
            "name": "LS.Components.CameraController",
            "shortname": "CameraController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/cameraController.js",
            "line": 1,
            "description": "Camera controller\nAllows to move a camera with the user input. It uses the first camera attached to the same node",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.CameraDirector": {
            "name": "LS.Components.CameraDirector",
            "shortname": "CameraDirector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/cameraDirector.js",
            "line": 1,
            "description": "CameraDirector allows to switch between scene cameras easily",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.CameraFX": {
            "name": "LS.Components.CameraFX",
            "shortname": "CameraFX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/cameraFX.js",
            "line": 1,
            "description": "This component allow to create basic FX",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Canvas3D": {
            "name": "LS.Components.Canvas3D",
            "shortname": "LS.Components.Canvas3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/canvas3d.js",
            "line": 2,
            "description": "Allows to render 2d canvas primitives, but they are rendered into a plane that can be positioned in 3D space.\nIt also supports to store the texture so it can be used in another material.\n\nThe CANVAS2D mode renders busing a native Canvas2D, which has all the features but it could be slower because it has to upload the full canvas every frame.\nThe WEBGL mode renders the canvas using WebGL calls, it is faster but the quality is worse and some features are not available (but you can render other textures as images)\nTo fill the canvas you must have a Script in the same node, that contains a method called OnRenderCanvas",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.CustomData": {
            "name": "LS.Components.CustomData",
            "shortname": "CustomData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/customData.js",
            "line": 1,
            "description": "This module allows to store custom data inside a node\nproperties have the form of:\n- name:\n- value:\n- type:",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.FollowNode": {
            "name": "LS.Components.FollowNode",
            "shortname": "FollowNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/followNode.js",
            "line": 1,
            "description": "FollowNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.FrameFX": {
            "name": "LS.Components.FrameFX",
            "shortname": "FrameFX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/frameFX.js",
            "line": 1,
            "description": "This component allow to create basic FX applied to the whole scene",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.GeometricPrimitive": {
            "name": "LS.Components.GeometricPrimitive",
            "shortname": "LS.Components.GeometricPrimitive",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/geometricPrimitive.js",
            "line": 1,
            "description": "GeometricPrimitive renders a primitive like a Cube, Sphere, Plane, etc",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.GraphComponent": {
            "name": "LS.Components.GraphComponent",
            "shortname": "LS.Components.GraphComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/graphComponents.js",
            "line": 22,
            "description": "This component allow to integrate a behaviour graph on any object",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.FXGraphComponent": {
            "name": "LS.Components.FXGraphComponent",
            "shortname": "FXGraphComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/graphComponents.js",
            "line": 256,
            "description": "This component allow to integrate a rendering post FX using a graph",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.InteractiveController": {
            "name": "LS.InteractiveController",
            "shortname": "LS.InteractiveController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/components/interactiveController.js",
            "line": 1,
            "description": "Allows to easily test interaction between the user and the scene, attach the InteractiveController to the root and the mouse down,move and up events will\nbe processed using a raycast and trigger events.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "last",
                    "description": "serialized data [optional]",
                    "type": "Object"
                }
            ]
        },
        "LS.Knob": {
            "name": "LS.Knob",
            "shortname": "Knob",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/components/knob.js",
            "line": 3,
            "description": "Knob allows to rotate a mesh like a knob (rotate when dragging)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Light": {
            "name": "LS.Components.Light",
            "shortname": "LS.Components.Light",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/light.js",
            "line": 3,
            "description": "Light contains all the info about the light (type: SPOT, OMNI, DIRECTIONAL, attenuations, shadows, etc)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.LightFX": {
            "name": "LS.Components.LightFX",
            "shortname": "LightFX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/lightFX.js",
            "line": 3,
            "description": "LightFX create volumetric and flare effects to the light",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.LinesRenderer": {
            "name": "LS.Components.LinesRenderer",
            "shortname": "LS.Components.LinesRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/linesRenderer.js",
            "line": 1,
            "description": "Helps rendering several lines",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.MeshRenderer": {
            "name": "LS.Components.MeshRenderer",
            "shortname": "LS.Components.MeshRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/meshRenderer.js",
            "line": 2,
            "description": "Renders one mesh, it allows to configure the rendering primitive, the submesh (range of mesh) and a level of detail mesh",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.NodeManipulator": {
            "name": "LS.Components.NodeManipulator",
            "shortname": "NodeManipulator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/nodeManipulator.js",
            "line": 1,
            "description": "Node manipulator, allows to rotate it",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Particle": {
            "name": "LS.Particle",
            "shortname": "LS.Particle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/components/particles.js",
            "line": 2,
            "description": "The base class used by the ParticlesEmissor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.ParticlesEmissor": {
            "name": "LS.Components.ParticlesEmissor",
            "shortname": "LS.Components.ParticlesEmissor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/particles.js",
            "line": 32,
            "description": "ParticlesEmissor allow to render a particle system, meant to render things like smoke or fire",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.PlayAnimation": {
            "name": "LS.Components.PlayAnimation",
            "shortname": "LS.Components.PlayAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/playAnimation.js",
            "line": 1,
            "description": "Reads animation tracks from an LS.Animation resource and applies the properties to the objects referenced",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Poser": {
            "name": "LS.Components.Poser",
            "shortname": "LS.Components.Poser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/poser.js",
            "line": 1,
            "description": "Transitions between different poses",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.RealtimeReflector": {
            "name": "LS.Components.RealtimeReflector",
            "shortname": "RealtimeReflector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/reflectionProbe.js",
            "line": 1,
            "description": "Realtime Reflective surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.SceneInclude": {
            "name": "LS.Components.SceneInclude",
            "shortname": "LS.Components.SceneInclude",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/sceneInclude.js",
            "line": 2,
            "description": "Allows to include a secondary scene inside this scene (with some limitations)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Script": {
            "name": "LS.Components.Script",
            "shortname": "LS.Components.Script",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/script.js",
            "line": 2,
            "description": "Script must be coded in Javascript and they have full access to all the engine, so one script could replace the behaviour of any part of the engine.\nScripts are executed inside their own context, the context is local to the script so any variable defined in the context that is not attached to the context wont be accessible from other parts of the engine.\nTo interact with the engine Scripts must bind callback to events so the callbacks will be called when those events are triggered, however, there are some generic methods that will be called",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.SkinDeformer": {
            "name": "LS.Components.SkinDeformer",
            "shortname": "LS.Components.SkinDeformer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/skinDeformer.js",
            "line": 2,
            "description": "It applyes skinning to a RenderInstance created by another component (usually MeshRenderer)\nIs in charge of gathering the bone nodes and adding to the RenderInstance the information needed to perform the skinning\nIt can do it using shader uniforms (simple way), a matrices texture (complex way), or by directly applying skinning by software (slow but well supported way)\nIt also allow to limit the bone search to specific nodes.",
            "is_constructor": 1
        },
        "LS.Components.Skybox": {
            "name": "LS.Components.Skybox",
            "shortname": "LS.Components.Skybox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/skybox.js",
            "line": 1,
            "description": "Skybox allows to render a cubemap or polar image as a background for the 3D scene",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "[optional] to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Spline": {
            "name": "LS.Components.Spline",
            "shortname": "Spline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/spline.js",
            "line": 1,
            "description": "Spline allows to define splines in 3D",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.SVGRenderer": {
            "name": "LS.Components.SVGRenderer",
            "shortname": "LS.Components.SVGRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/svgRenderer.js",
            "line": 4,
            "description": "Renders one mesh, it allows to configure the rendering primitive, the submesh (range of mesh) and a level of detail mesh",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Target": {
            "name": "LS.Components.Target",
            "shortname": "Target",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/target.js",
            "line": 1,
            "description": "Target rotate a mesh to look at the camera or another object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Transform": {
            "name": "LS.Components.Transform",
            "shortname": "LS.Components.Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/components/transform.js",
            "line": 1,
            "description": "Transform that contains the position (vec3), rotation (quat) and scale (vec3) \nIt uses lazy update to recompute the matrices.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.FXStack": {
            "name": "LS.Components.FXStack",
            "shortname": "FXStack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Components",
            "file": "../src/helpers/FXstack.js",
            "line": 1,
            "description": "Helps apply a stack of FXs to a texture with as fewer render calls as possible with low memory footprint\nUsed by CameraFX and FrameFX but also available for any other use\nYou can add new FX to the FX pool if you want."
        },
        "LS.SpatialContainer": {
            "name": "LS.SpatialContainer",
            "shortname": "SpatialContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/helpers/spatialContainer.js",
            "line": 3,
            "description": "This class allows to store data spatially so it can be retrieved by proximity or by camera frustum view.\nIt can store objects associated with a bounding box.\nIt is used by the renderer to store all the RenderInstances, Lights and Colliders\nIT IS A WORK IN PROGRESS SO FOR NOW IT DO NOT STORES THE INFO SPATIALLY, IT JUST EXPOSES AN INTERFACE"
        },
        "LS.Tween": {
            "name": "LS.Tween",
            "shortname": "LS.Tween",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/helpers/tween.js",
            "line": 1,
            "description": "Allows to launch tweening",
            "is_constructor": 1
        },
        "LS.Material": {
            "name": "LS.Material",
            "shortname": "LS.Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/materials/material.js",
            "line": 5,
            "description": "A Material is a class in charge of defining how to render an object, there are several classes for Materials\nbut this class is more like a template for other material classes.\nThe rendering of a material is handled by the material itself, if not provided then uses the Renderer default one",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.StandardMaterial": {
            "name": "LS.StandardMaterial",
            "shortname": "LS.StandardMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/materials/standardMaterial.js",
            "line": 7,
            "description": "StandardMaterial class improves the material class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "[optional] to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.ShaderMaterial": {
            "name": "LS.ShaderMaterial",
            "shortname": "LS.ShaderMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/materials/shaderMaterial.js",
            "line": 2,
            "description": "ShaderMaterial allows to use your own shader from scratch, but you loose some of the benefits of using the dynamic shader system of LS",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "[optional] to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.UnityMaterial": {
            "name": "LS.UnityMaterial",
            "shortname": "LS.UnityMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/materials/unityMaterial.js",
            "line": 2,
            "description": "UnityMaterial allows to use Unity ShaderLab materials",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "[optional] to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.DebugRender": {
            "name": "LS.DebugRender",
            "shortname": "LS.DebugRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/render/debug.js",
            "line": 1,
            "description": "Used to render debug information like skeletons, a grid, etc\nI moved it from WebGLStudio to LS so it could help when working with scenes coded without the editor",
            "is_constructor": 1
        },
        "LS.Draw": {
            "name": "LS.Draw",
            "shortname": "Draw",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/render/draw.js",
            "line": 5,
            "description": "LS.Draw allows to render basic primitives, similar to the OpenGL Fixed pipeline.\nIt reuses local meshes when possible to avoid fragmenting the VRAM.",
            "is_constructor": 1
        },
        "LS.RenderFrameContext": {
            "name": "LS.RenderFrameContext",
            "shortname": "LS.RenderFrameContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/render/renderFrameContext.js",
            "line": 1,
            "description": "This class is used when you want to render the scene not to the screen but to some texture for postprocessing\nIt helps to create the textures and bind them easily, add extra buffers or show it on the screen.\nCheck the FrameFX and CameraFX components to see it in action.\n   Dependencies: LS.Renderer (writes there only)",
            "is_constructor": 1
        },
        "LS.RenderInstance": {
            "name": "LS.RenderInstance",
            "shortname": "LS.RenderInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/render/renderInstance.js",
            "line": 1,
            "description": "RenderInstance contains info of one object to be rendered on the scene.\nIt shouldnt contain ids to resources (strings), instead if must contain the direct reference (to mesh, material)",
            "is_constructor": 1
        },
        "LS.RenderSettings": {
            "name": "LS.RenderSettings",
            "shortname": "RenderSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/render/renderSettings.js",
            "line": 1,
            "description": "There could be different renderSettings for different scene quality.",
            "is_constructor": 1
        },
        "LS.RenderState": {
            "name": "LS.RenderState",
            "shortname": "LS.RenderState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/render/renderState.js",
            "line": 1,
            "description": "RenderState sets the flags for the GPU associated with a rendering action (blending, masking, depth test, etc)\nIt is stored in the material (although defined usually from ShaderCode) so the material can use it.",
            "is_constructor": 1
        },
        "LS.Renderer": {
            "name": "LS.Renderer",
            "shortname": "LS.Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/render/renderer.js",
            "line": 3,
            "description": "The Renderer is in charge of generating one frame of the scene. Contains all the passes and intermediate functions to create the frame.",
            "is_constructor": 1
        },
        "LS.Animation": {
            "name": "LS.Animation",
            "shortname": "LS.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/resources/animation.js",
            "line": 9,
            "description": "An Animation is a resource that contains samples of properties over time, similar to animation curves\nValues could be associated to an specific node.\nData is contained in tracks",
            "is_constructor": 1
        },
        "LS.Animation.Take": {
            "name": "LS.Animation.Take",
            "shortname": "LS.Animation.Take",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS.Animation",
            "file": "../src/resources/animation.js",
            "line": 303,
            "description": "Represents a set of animations",
            "is_constructor": 1
        },
        "LS.Animation.Track": {
            "name": "LS.Animation.Track",
            "shortname": "LS.Animation.Track",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/resources/animation.js",
            "line": 703,
            "description": "Represents one track with data over time about one property\nData could be stored in two forms, or an array containing arrays of [time,data] (unpacked data) or in a single typed array (packed data), depends on the attribute typed_mode",
            "is_constructor": 1
        },
        "LS.Pack": {
            "name": "LS.Pack",
            "shortname": "Pack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/resources/pack.js",
            "line": 4,
            "description": "Pack is an object that contain several resources, helpful when you want to carry a whole scene in one single file",
            "is_constructor": 1
        },
        "LS.Prefab": {
            "name": "LS.Prefab",
            "shortname": "Prefab",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/resources/prefab.js",
            "line": 2,
            "description": "Prefab work in two ways: \n- It can contain a node structure and all the associated resources (textures, meshes, animations, etc)\n- When a node in the scene was created from a Prefab, the prefab is loaded so the associated resources are recovered, but the node structure is not modified.",
            "is_constructor": 1
        },
        "LS.Resource": {
            "name": "LS.Resource",
            "shortname": "Resource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/resources/resource.js",
            "line": 2,
            "description": "This class contains all the info about a resource and it works as a template for any resource class\nKeep in mind that there are many resource classes like Meshes or Textures that DONT INHERIT FROM THIS CLASS.\nThis class is used mainly to generic file resources like text files (scripts, csvs, etc)",
            "is_constructor": 1
        },
        "LS.ShaderCode": {
            "name": "LS.ShaderCode",
            "shortname": "ShaderCode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/resources/shaderCode.js",
            "line": 2,
            "description": "ShaderCode is a resource containing all the code associated to a shader\nIt is used to define special ways to render scene objects, having full control of the rendering algorithm\nHaving a special class helps to parse the data in advance and share it between different materials",
            "is_constructor": 1
        },
        "LS.ShaderGraph": {
            "name": "LS.ShaderGraph",
            "shortname": "ShaderGraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/resources/shaderGraph.js",
            "line": 2,
            "description": "ShaderGraph is a resource containing a graph that generates the code associated to a shader\nIt is used to define special ways to render scene objects, having full control of the rendering algorithm",
            "is_constructor": 1
        },
        "LS.LScript": {
            "name": "LS.LScript",
            "shortname": "LScript",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/utils/lscript.js",
            "line": 3,
            "description": "LScript allows to compile code during execution time having a clean context\nIt adds some syntactic features and controls errors in a safe way",
            "is_constructor": 1
        },
        "LS.WBin": {
            "name": "LS.WBin",
            "shortname": "WBin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/utils/wbin.js",
            "line": 26,
            "description": "WBin allows to create binary files easily (similar to WAD format). You can pack lots of resources in one file or extract them."
        },
        "LS.Component": {
            "name": "LS.Component",
            "shortname": "LS.Component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/component.js",
            "line": 20,
            "description": "This is an example class for a component, should never be instantiated by itself, \ninstead components get all the methods from this class attached when the component is registered.\nComponents can overwrite this methods if they want."
        },
        "LS.ComponentContainer": {
            "name": "LS.ComponentContainer",
            "shortname": "ComponentContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/componentContainer.js",
            "line": 6,
            "description": "ComponentContainer class allows to add component based properties to any other class",
            "is_constructor": 1
        },
        "LS.CompositePattern": {
            "name": "LS.CompositePattern",
            "shortname": "CompositePattern",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/compositePattern.js",
            "line": 2,
            "description": "CompositePattern implements the Composite Pattern, which allows to one class to contain instances of its own class\ncreating a tree-like structure.",
            "is_constructor": 1
        },
        "LS.LS": {
            "name": "LS.LS",
            "shortname": "LS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/core.js",
            "line": 13,
            "description": "LS is the global scope for the global functions and containers of LiteScene"
        },
        "LSQ": {
            "name": "LSQ",
            "shortname": "LSQ",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "",
            "file": "../src/core.js",
            "line": 1015,
            "description": "LSQ allows to set or get values easily from the global scene, using short strings as identifiers\nsimilar to jQuery and the DOM:  LSQ(\"nod_name\").material = ..."
        },
        "LS.Ray": {
            "name": "LS.Ray",
            "shortname": "LS.Ray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/defines.js",
            "line": 90,
            "description": "A Ray that contains an origin and a direction (it uses the Ray class from litegl, so to check documentation go to litegl doc",
            "is_constructor": 1,
            "params": [
                {
                    "name": "origin",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "",
                    "type": "Vec3"
                }
            ]
        },
        "LS.Formats": {
            "name": "LS.Formats",
            "shortname": "LS.Formats",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/formats.js",
            "line": 1,
            "description": "Formats is the class where all the info about what is every format, how to parse it, etc, is located",
            "params": [
                {
                    "name": "id",
                    "description": "the id (otherwise a random one is computed)",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "LS.GUI": {
            "name": "LS.GUI",
            "shortname": "LS.GUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/gui.js",
            "line": 2,
            "description": "GUI is a static class used to create two kinds of GUIs: HTML GUIs on top of the 3D Canvas (in a safe way) or Immediate GUI using a Canvas2D (fast gui)\nFor HTML GUIs check the getHTMLRoot function.\nFor Immediate GUIs check the Box,Button,Toggle,Textfield,HorizontalSlider,VerticalSlider and Toolbar.\nTo change colors of the immediate GUI check the LS.GUI.GUIStyle",
            "is_constructor": 1
        },
        "LS.Input": {
            "name": "LS.Input",
            "shortname": "LS.Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/input.js",
            "line": 2,
            "description": "Input is a static class used to read the input state (keyboard, mouse, gamepad, etc)",
            "is_constructor": 1
        },
        "LS.Collision": {
            "name": "LS.Collision",
            "shortname": "LS.Collision",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 3,
            "description": "Contains information about the collision of a ray and the scene\n- position: vec3\n- node: SceneNode\n- instance: could be a RenderInstance or a PhysicsInstance\n- distance: number",
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "SceneNode"
                },
                {
                    "name": "instance",
                    "description": "",
                    "type": "PhysicsInstance|RenderInstance"
                },
                {
                    "name": "position",
                    "description": "collision position",
                    "type": "Vec3"
                },
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "LS.PhysicsInstance": {
            "name": "LS.PhysicsInstance",
            "shortname": "LS.PhysicsInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 37,
            "description": "PhysicsInstance contains info of a colliding object. Used to test collisions with the scene",
            "is_constructor": 1
        },
        "LS.Physics": {
            "name": "LS.Physics",
            "shortname": "LS.Physics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 93,
            "description": "Physics is in charge of all physics testing methods\nRight now is mostly used for testing collisions with rays agains the colliders in the scene",
            "is_constructor": 1
        },
        "LS.Picking": {
            "name": "LS.Picking",
            "shortname": "LS.Picking",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/picking.js",
            "line": 2,
            "description": "Picking is used to detect which element is below one pixel (used the GPU) or using raycast",
            "is_constructor": 1
        },
        "LS.Player": {
            "name": "LS.Player",
            "shortname": "LS.Player",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/player.js",
            "line": 1,
            "description": "Player class allows to handle the app context easily without having to glue manually all events\n\tThere is a list of options\n\t==========================\n\t- canvas: the canvas where the scene should be rendered, if not specified one will be created\n\t- container_id: string with container id where to create the canvas, width and height will be those from the container\n\t- width: the width for the canvas in case it is created without a container_id\n\t- height: the height for the canvas in case it is created without a container_id\n\t- resources: string with the path to the resources folder\n\t- shaders: string with the url to the shaders.xml file\n\t- proxy: string with the url where the proxy is located (useful to avoid CORS)\n\t- filesystems: object that contains the virtual file systems info { \"VFS\":\"http://litefileserver.com/\" } ...\n\t- redraw: boolean to force to render the scene constantly (useful for animated scenes)\n\t- autoresize: boolean to automatically resize the canvas when the window is resized\n\t- autoplay: boolean to automatically start playing the scene once the load is completed\n\t- loadingbar: boolean to show a loading bar\n\t- debug: boolean allows to render debug info like nodes and skeletons\n\n\tOptional callbacks to attach\n\t============================\n\t- onPreDraw: executed before drawing a frame (in play mode)\n\t- onDraw: executed after drawing a frame (in play mode)\n\t- onPreUpdate(dt): executed before updating the scene (delta_time as parameter)\n\t- onUpdate(dt): executed after updating the scene (delta_time as parameter)\n\t- onDrawLoading: executed when loading\n\t- onMouse(e): when a mouse event is triggered\n\t- onKey(e): when a key event is triggered",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "settings for the webgl context creation",
                    "type": "Object"
                }
            ]
        },
        "LS.Project": {
            "name": "LS.Project",
            "shortname": "Project",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/project.js",
            "line": 1,
            "description": "The Project is the top-most object that contains the whole application, from the project we can load other scenes\nWORK IN PROGRESS",
            "is_constructor": 1
        },
        "LS.ResourcesManager": {
            "name": "LS.ResourcesManager",
            "shortname": "ResourcesManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/resourcesManager.js",
            "line": 1,
            "description": "Static class that contains all the resources loaded, parsed and ready to use.\nIt also contains the parsers and methods in charge of processing them",
            "is_constructor": 1
        },
        "LS.SceneTree": {
            "name": "LS.SceneTree",
            "shortname": "SceneTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/scene.js",
            "line": 1,
            "description": "The SceneTree contains all the info about the Scene and nodes",
            "is_constructor": 1
        },
        "LS.SceneNode": {
            "name": "LS.SceneNode",
            "shortname": "SceneNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/sceneNode.js",
            "line": 3,
            "description": "The SceneNode class represents and object in the scene\nIs the base class for all objects in the scene as meshes, lights, cameras, and so",
            "params": [
                {
                    "name": "name",
                    "description": "the name for this node (otherwise a random one is computed)",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "LS.ShadersManager": {
            "name": "LS.ShadersManager",
            "shortname": "LS.ShadersManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/shadersManager.js",
            "line": 7,
            "description": "ShadersManager is the static class in charge of loading, compiling and storing shaders for reuse.",
            "is_constructor": 1
        },
        "LS.ShaderQuery": {
            "name": "LS.ShaderQuery",
            "shortname": "LS.ShaderQuery",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/shadersManager.js",
            "line": 714,
            "description": "ShaderQuery is in charge of specifying info that must be taken into account when compiling a shader",
            "is_constructor": 1
        },
        "LS.GLSLCode": {
            "name": "LS.GLSLCode",
            "shortname": "GLSLCode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LS",
            "namespace": "LS",
            "file": "../src/shadersManager.js",
            "line": 842,
            "description": "Used for parsing GLSL code and precompute info (mostly preprocessor macros)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "code",
                    "description": "",
                    "type": "String"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "../src/components/camera.js",
            "line": 152,
            "description": "Camera type, could be Camera.PERSPECTIVE or Camera.ORTHOGRAPHIC",
            "itemtype": "property",
            "name": "type",
            "type": "Vec3",
            "default": "Camera.PERSPECTIVE;",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 172,
            "description": "The position of the camera (in local space, node space)",
            "itemtype": "property",
            "name": "eye",
            "type": "Vec3",
            "default": "[0,100,100]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 188,
            "description": "The center where the camera points (in local space, node space)",
            "itemtype": "property",
            "name": "center",
            "type": "Vec3",
            "default": "[0,0,0]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 204,
            "description": "The distance between the center and the eye point\nWhen focalLength is modified it will change the center so it matches the distance.",
            "itemtype": "property",
            "name": "focalLength",
            "type": "Number",
            "default": "(depends)",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 226,
            "description": "The up vector of the camera (in local space, node space)",
            "itemtype": "property",
            "name": "up",
            "type": "Vec3",
            "default": "[0,1,0]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 242,
            "description": "The near plane",
            "itemtype": "property",
            "name": "near",
            "type": "Number",
            "default": "1",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 259,
            "description": "The far plane",
            "itemtype": "property",
            "name": "far",
            "type": "Number",
            "default": "1000",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 276,
            "description": "The camera aspect ratio",
            "itemtype": "property",
            "name": "aspect",
            "type": "Number",
            "default": "1",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 306,
            "description": "The field of view in degrees",
            "itemtype": "property",
            "name": "fov",
            "type": "Number",
            "default": "45",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 323,
            "description": "The frustum size when working in ORTHOGRAPHIC",
            "itemtype": "property",
            "name": "frustum_size",
            "type": "Number",
            "default": "50",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 344,
            "description": "The frustum size when working in pure ORTHOGRAPHIC \nleft,right,bottom,top (near and far are in the near,far properties)",
            "itemtype": "property",
            "name": "orthographic",
            "type": "Vec4",
            "default": "50",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 364,
            "description": "The view matrix of the camera",
            "itemtype": "property",
            "name": "view_matrix",
            "type": "Vec4",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 378,
            "description": "The projection matrix of the camera (cannot be set manually, use setCustomProjectionMatrix instead)",
            "itemtype": "property",
            "name": "projection_matrix",
            "type": "Mat4",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 393,
            "description": "The viewport in normalized coordinates (left,bottom, width, height)",
            "itemtype": "property",
            "name": "viewport",
            "type": "Vec4",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 407,
            "itemtype": "property",
            "name": "viewport_offset",
            "type": "Vec2",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 420,
            "itemtype": "property",
            "name": "viewport_size",
            "type": "Vec2",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 433,
            "description": "the clear color",
            "itemtype": "property",
            "name": "background_color",
            "type": "Vec4",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 447,
            "description": "returns the texture from the render frame context",
            "itemtype": "property",
            "name": "render_to_texture",
            "type": "GL.Texture",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 468,
            "description": "contains the RenderFrameContext where the scene was stored",
            "itemtype": "property",
            "name": "frame",
            "type": "LS.RenderFrameContext",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 482,
            "description": "contains the color texture used by the RenderFrameContext",
            "itemtype": "property",
            "name": "frame_color_texture",
            "type": "GL.Texture",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 498,
            "description": "contains the depth texture used by the RenderFrameContext",
            "itemtype": "property",
            "name": "frame_depth_texture",
            "type": "GL.Texture",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 515,
            "description": "to force updating projection and view matrix",
            "itemtype": "property",
            "name": "mustUpdate",
            "type": "Boolean",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 603,
            "description": "Positions the camera at eye, pointing at center, and facing up as vertical.\nIf the camera is a node camera, then the node transform is modified (plus the center to match the focalLength)",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "eye",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "center",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 629,
            "description": "Positions the camera using a matrix that contains the position an orientation (NOT FULLY TESTED)\nIf the camera is a node camera, then the node transform is modified (plus the center to match the focalLength)",
            "itemtype": "method",
            "name": "lookAtFromMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Mat4"
                },
                {
                    "name": "is_model",
                    "description": "if false the matrix is assumed to be a view matrix, otherwise a model (inverse of view)",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 665,
            "description": "resets eye, center and up, so they are in [0,0,0],[0,0,-focalDist] and [0,1,0]",
            "itemtype": "method",
            "name": "resetVectors",
            "params": [
                {
                    "name": "focalDist",
                    "description": "[optional] it not set it will be 1",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 679,
            "description": "Update matrices according to the eye,center,up,fov,aspect,...",
            "itemtype": "method",
            "name": "updateMatrices",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 727,
            "description": "Update the frustum planes according to viewprojection_matrix, used for visibility testing",
            "itemtype": "method",
            "name": "updateFrustumPlanes",
            "return": {
                "description": "planes",
                "type": "Float32Array"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 738,
            "description": "returns the inverse of the viewmatrix",
            "itemtype": "method",
            "name": "getModelMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 752,
            "description": "returns the viewmatrix",
            "itemtype": "method",
            "name": "getViewMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 766,
            "description": "returns the projection matrix",
            "itemtype": "method",
            "name": "getProjectionMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 780,
            "description": "returns the view projection matrix",
            "itemtype": "method",
            "name": "getViewProjectionMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                },
                {
                    "name": "force",
                    "description": "optional force to update",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 795,
            "description": "returns the model view projection matrix computed from a passed model",
            "itemtype": "method",
            "name": "getModelViewProjectionMatrix",
            "params": [
                {
                    "name": "model",
                    "description": "model matrix",
                    "type": "Mat4"
                },
                {
                    "name": "out",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 810,
            "description": "apply a transform to all the vectors (eye,center,up) using a matrix",
            "itemtype": "method",
            "name": "updateVectors",
            "params": [
                {
                    "name": "model",
                    "description": "matrix",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 825,
            "description": "transform a local coordinate to global coordinates",
            "itemtype": "method",
            "name": "getLocalPoint",
            "params": [
                {
                    "name": "v",
                    "description": "vector",
                    "type": "Vec3"
                },
                {
                    "name": "dest",
                    "description": "where to store the output, if not provided a vec3 is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "v in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 845,
            "description": "rotate a local coordinate to global coordinates (skipping translation)",
            "itemtype": "method",
            "name": "getLocalVector",
            "params": [
                {
                    "name": "v",
                    "description": "vector",
                    "type": "Vec3"
                },
                {
                    "name": "dest",
                    "description": "where to store the output, if not provided a vec3 is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "v in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 866,
            "description": "Returns the eye (position of the camera) in global coordinates\nTakes into account if it is a camera attached to a node\nThe result of this function wont match the _eye property if the camera is a node camera",
            "itemtype": "method",
            "name": "getEye",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 886,
            "description": "returns the center of the camera (position where the camera is pointing) in global coordinates",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 904,
            "description": "returns the front vector of the camera",
            "itemtype": "method",
            "name": "getFront",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 924,
            "description": "returns the up vector of the camera",
            "itemtype": "method",
            "name": "getUp",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 944,
            "description": "returns the top vector of the camera (different from up, this one is perpendicular to front and right)",
            "itemtype": "method",
            "name": "getTop",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 962,
            "description": "returns the right vector of the camera",
            "itemtype": "method",
            "name": "getRight",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 993,
            "description": "set camera in perspective mode and sets the properties",
            "itemtype": "method",
            "name": "setPerspective",
            "params": [
                {
                    "name": "fov",
                    "description": "in degrees",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "the aspect modifier (not the real final aspect, leave it to one)",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "distance",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "distance",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1011,
            "description": "set camera in orthographic mode and sets the planes",
            "itemtype": "method",
            "name": "setOrthographic",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bottom",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1030,
            "description": "moves the camera by adding the delta vector to center and eye",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "delta",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1049,
            "description": "rotate the camera around its center",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "in_local_space",
                    "description": "allows to specify if the axis is in local space or global space",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1086,
            "description": "Rotates the camera eye around a center",
            "itemtype": "method",
            "name": "orbit",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "center",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1133,
            "description": "Pans the camera (move acording to view)",
            "itemtype": "method",
            "name": "panning",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1156,
            "description": "changes the distance between eye and center ( it could move the center or the eye, depending on the parameters )",
            "itemtype": "method",
            "name": "setDistanceToCenter",
            "params": [
                {
                    "name": "new_distance",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "move_eye",
                    "description": "if this is true it moves the eye closer, otherwise it moves the center closer to the eye",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1179,
            "description": "orients the camera (changes where is facing) according to the rotation supplied",
            "itemtype": "method",
            "name": "setOrientation",
            "params": [
                {
                    "name": "q",
                    "description": "",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1217,
            "description": "orients the camera (changes where is facing) using euler angles (yaw,pitch,roll)",
            "itemtype": "method",
            "name": "setEulerAngles",
            "params": [
                {
                    "name": "yaw",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pitch",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "roll",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1231,
            "description": "uses a view matrix to compute the eye,center,up vectors",
            "itemtype": "method",
            "name": "fromViewMatrix",
            "params": [
                {
                    "name": "mat",
                    "description": "the given view matrix",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1252,
            "description": "overwrites the current projection matrix with a given one (it also blocks the camera from modifying the projection matrix)",
            "itemtype": "method",
            "name": "setCustomProjectionMatrix",
            "params": [
                {
                    "name": "mat",
                    "description": "the given projection matrix (or null to disable it)",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1274,
            "description": "Sets the viewport in pixels (using the gl.canvas as reference)",
            "itemtype": "method",
            "name": "setViewportInPixels",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1291,
            "description": "Converts a 3D point to its 2D position in canvas space",
            "itemtype": "method",
            "name": "project",
            "params": [
                {
                    "name": "vec",
                    "description": "3D position we want to proyect to 2D",
                    "type": "Vec3"
                },
                {
                    "name": "viewport",
                    "description": "viewport info (if omited full canvas viewport is used)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the coordinates in 2D",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1321,
            "description": "It tells you the 2D position of a node center in the screen",
            "itemtype": "method",
            "name": "projectNodeCenter",
            "params": [
                {
                    "name": "vec",
                    "description": "3D position we want to proyect to 2D",
                    "type": "Vec3"
                },
                {
                    "name": "viewport",
                    "description": "viewport info (if omited full canvas viewport is used)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the coordinates in 2D",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1335,
            "description": "Converts a screen space 2D vector (with a Z value) to its 3D equivalent position",
            "itemtype": "method",
            "name": "unproject",
            "params": [
                {
                    "name": "vec",
                    "description": "2D position we want to proyect to 3D",
                    "type": "Vec3"
                },
                {
                    "name": "viewport",
                    "description": "viewport info (if omited full canvas viewport is used)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the coordinates in 2D",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1351,
            "description": "returns the viewport in pixels applying the local camera viewport to the full viewport of the canvas",
            "itemtype": "method",
            "name": "getLocalViewport",
            "params": [
                {
                    "name": "viewport",
                    "description": "viewport info, otherwise the canvas dimensions will be used (not the current viewport)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "vec4"
                }
            ],
            "return": {
                "description": "the viewport info of the camera in pixels",
                "type": "Vec4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1380,
            "description": "given an x and y position, returns the ray {start, dir}",
            "itemtype": "method",
            "name": "getRay",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "viewport",
                    "description": "viewport coordinates (if omited full viewport is used using the camera viewport)",
                    "type": "Vec4"
                },
                {
                    "name": "skip_local_viewport",
                    "description": "ignore the local camera viewport configuration when computing the viewport",
                    "type": "Boolean"
                },
                {
                    "name": "result",
                    "description": "[optional] to reuse ray",
                    "type": "LS.Ray"
                }
            ],
            "return": {
                "description": "{origin:vec3, direction:vec3} or null is values are undefined or NaN",
                "type": "LS.Ray"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 1417,
            "description": "Returns true if the 2D point (in screen space coordinates) is inside the camera viewport area",
            "itemtype": "method",
            "name": "isPointInCamera",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "viewport",
                    "description": "viewport coordinates (if omited full viewport is used)",
                    "type": "Vec4"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/cameraFX.js",
            "line": 10,
            "description": "The FX Stack",
            "itemtype": "property",
            "name": "fx",
            "type": "LS.FXStack",
            "class": "LS.Components.CameraFX",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/cameraFX.js",
            "line": 16,
            "description": "The position of the camera (in local space, node space)",
            "itemtype": "property",
            "name": "eye",
            "type": "Vec3",
            "default": "[0,100,100]",
            "class": "LS.Components.CameraFX",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/cameraFX.js",
            "line": 34,
            "description": "Apply antialiasing post-processing shader",
            "itemtype": "property",
            "name": "use_antialiasing",
            "type": "Boolean",
            "class": "LS.Components.CameraFX",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/geometricPrimitive.js",
            "line": 28,
            "description": "The shape to render, valid values are: LS.Components.GeometricPrimitive.CUBE,PLANE,CYLINDER,SPHERE,CIRCLE,HEMISPHERE,ICOSAHEDRON,CONE,QUAD",
            "itemtype": "property",
            "name": "geometry",
            "type": "Enum",
            "default": "LS.Components.GeometricPrimitive.CUBE",
            "class": "LS.Components.GeometricPrimitive",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/geometricPrimitive.js",
            "line": 47,
            "description": "The size of the primitive (the global scale)",
            "itemtype": "property",
            "name": "size",
            "type": "Number",
            "default": "10",
            "class": "LS.Components.GeometricPrimitive",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/geometricPrimitive.js",
            "line": 74,
            "description": "The GL primitive to use (LINES,LINE_STRIP,TRIANGLES,TRIANGLE_FAN",
            "itemtype": "property",
            "name": "primitive",
            "type": "Enum",
            "default": "10",
            "class": "LS.Components.GeometricPrimitive",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/geometricPrimitive.js",
            "line": 214,
            "description": "Assigns a mesh as custom mesh and sets the geometry to CUSTOM",
            "itemtype": "method",
            "name": "setCustomMesh",
            "params": [
                {
                    "name": "mesh",
                    "description": "the mesh to use as custom mesh",
                    "type": "GL.Mesh"
                }
            ],
            "class": "LS.Components.GeometricPrimitive",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/graphComponents.js",
            "line": 64,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.GraphComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/graphComponents.js",
            "line": 307,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.FXGraphComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 12,
            "description": "Position of the light in world space",
            "itemtype": "property",
            "name": "position",
            "type": "{[[x,y,z]]}",
            "default": "[0,0,0]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 19,
            "description": "Position where the light is pointing at (in world space)",
            "itemtype": "property",
            "name": "target",
            "type": "{[[x,y,z]]}",
            "default": "[0,0,1]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 26,
            "description": "Up vector (in world coordinates)",
            "itemtype": "property",
            "name": "up",
            "type": "{[[x,y,z]]}",
            "default": "[0,1,0]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 34,
            "description": "Enabled",
            "itemtype": "property",
            "name": "enabled",
            "type": "{Boolean}",
            "default": "true",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 42,
            "description": "Layers mask, this layers define which objects are iluminated by this light",
            "itemtype": "property",
            "name": "layers",
            "type": "{Number}",
            "default": "true",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 51,
            "description": "Near distance",
            "itemtype": "property",
            "name": "near",
            "type": "{Number}",
            "default": "1",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 58,
            "description": "Far distance",
            "itemtype": "property",
            "name": "far",
            "type": "{Number}",
            "default": "1000",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 66,
            "description": "Angle for the spot light inner apperture",
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "default": "45",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 73,
            "description": "Angle for the spot light outer apperture",
            "itemtype": "property",
            "name": "angle_end",
            "type": "{Number}",
            "default": "60",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 86,
            "description": "type of attenuation: Light.NO_ATTENUATION, Light.LINEAR_ATTENUATION, Light.RANGE_ATTENUATION",
            "itemtype": "property",
            "name": "attenuation_type",
            "type": "{Number}",
            "default": "[1,1,1]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 103,
            "description": "The color of the light",
            "itemtype": "property",
            "name": "color",
            "type": "{vec3}",
            "default": "[1,1,1]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 110,
            "description": "The intensity of the light",
            "itemtype": "property",
            "name": "intensity",
            "type": "{Number}",
            "default": "1",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 121,
            "description": "If the light cast shadows",
            "itemtype": "property",
            "name": "cast_shadows",
            "type": "{Boolean}",
            "default": "false",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 330,
            "description": "Returns the camera that will match the light orientation (taking into account fov, etc), useful for shadowmaps",
            "itemtype": "method",
            "name": "getLightCamera",
            "return": {
                "description": "the camera",
                "type": "Camera"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 342,
            "description": "updates all the important vectors (target, position, etc) according to the node parent of the light",
            "itemtype": "method",
            "name": "updateVectors",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 383,
            "description": "returns a copy of the light position (in global coordinates), if you want local you can access the position property",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the position",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 399,
            "description": "returns a copy of the light target (in global coordinates), if you want local you can access the target property",
            "itemtype": "method",
            "name": "getTarget",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the target",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 414,
            "description": "returns a copy of the light up vector (in global coordinates), if you want local you can access the up property",
            "itemtype": "method",
            "name": "getUp",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the up vector",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 430,
            "description": "returns a copy of the front vector (in global coordinates)",
            "itemtype": "method",
            "name": "getFront",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the front vector",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 481,
            "description": "This method is called by the LS.Renderer when the light needs to be prepared to be used during render (compute light camera, create shadowmaps, prepare macros, etc)",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "render_settings",
                    "description": "info about how the scene will be rendered",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 660,
            "description": "Collects and returns the shader query of the light (some macros have to be computed now because they depend not only on the light, also on the node or material)",
            "itemtype": "method",
            "name": "getQuery",
            "params": [
                {
                    "name": "instance",
                    "description": "the render instance where this light will be applied",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_settings",
                    "description": "info about how the scene will be rendered",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the macros",
                "type": "ShaderQuery"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 700,
            "description": "Optimization: instead of using the far plane, we take into account the attenuation to avoid rendering objects where the light will never reach",
            "itemtype": "method",
            "name": "computeShadowmapFar",
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 726,
            "description": "Computes the max amount of light this object can produce (taking into account every color channel)",
            "itemtype": "method",
            "name": "computeLightIntensity",
            "return": {
                "description": "intensity",
                "type": "Number"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 737,
            "description": "Computes the light radius according to the attenuation",
            "itemtype": "method",
            "name": "computeLightRadius",
            "return": {
                "description": "radius",
                "type": "Number"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 754,
            "description": "Generates the shadowmap for this light",
            "itemtype": "method",
            "name": "generateShadowmap",
            "return": {
                "description": "render_settings",
                "type": "Object"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 833,
            "description": "It returns the global matrix",
            "itemtype": "method",
            "name": "getGlobalMatrix",
            "params": [
                {
                    "name": "output",
                    "description": "[optional]",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "mat4",
                "type": "Mat4"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 850,
            "description": "It returns a matrix in the position of the given light property (target, position), mostly used for gizmos",
            "itemtype": "method",
            "name": "getTransformMatrix",
            "params": [
                {
                    "name": "element",
                    "description": "\"target\" or \"position\"",
                    "type": "String"
                },
                {
                    "name": "output",
                    "description": "[optional]",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "mat4",
                "type": "Mat4"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 875,
            "description": "apply a transformation to a given light property, this is done in a function to allow more complex gizmos",
            "itemtype": "method",
            "name": "applyTransformMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "transformation in matrix form",
                    "type": "Mat4"
                },
                {
                    "name": "center",
                    "description": "�?",
                    "type": "Vec3"
                },
                {
                    "name": "property_name",
                    "description": "\"target\" or \"position\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "mat4",
                "type": "Mat4"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 13,
            "description": "The name of the mesh to render",
            "itemtype": "property",
            "name": "mesh",
            "type": "String",
            "default": "null;",
            "class": "LS.Components.MeshRenderer",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 19,
            "description": "The name of the mesh to render in case the mesh is far away, this mesh is also used for collision testing if using raycast to RenderInstances",
            "itemtype": "property",
            "name": "lod_mesh",
            "type": "String",
            "default": "null;",
            "class": "LS.Components.MeshRenderer",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 25,
            "description": "The id of the submesh group to render, if the id is -1 then all the mesh is rendered.",
            "itemtype": "property",
            "name": "submesh_id",
            "type": "Number",
            "default": "-1;",
            "class": "LS.Components.MeshRenderer",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 33,
            "description": "The GL primitive to use when rendering this mesh (gl.POINTS, gl.TRIANGLES, etc), -1 is default, it also supports the option 10 which means Wireframe",
            "itemtype": "property",
            "name": "primitive",
            "type": "Number",
            "default": "-1;",
            "class": "LS.Components.MeshRenderer",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 167,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.MeshRenderer",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 191,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.MeshRenderer",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 17,
            "description": "the root node locator where to apply the animation, is none is specified it is applied using the scene root node\nif a \"@\" is set, then only to this node and its children",
            "itemtype": "property",
            "name": "root_node",
            "type": "String",
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 25,
            "description": "how to play the animation, options are:\n  PlayAnimation.LOOP\n\tPlayAnimation.PINGPONG\n\tPlayAnimation.ONCE\n\tPlayAnimation.PAUSED",
            "itemtype": "property",
            "name": "mode",
            "type": "Number",
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 83,
            "description": "the name of the LS.Animation resource where the takes and tracks are stored",
            "itemtype": "property",
            "name": "animation",
            "type": "String",
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 114,
            "description": "the name of the LS.Animation.Take to play from the LS.Animation\nA take representes a set of tracks",
            "itemtype": "property",
            "name": "take",
            "type": "String",
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 323,
            "description": "returns the current animation or an animation with a given name",
            "itemtype": "method",
            "name": "getAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "[optional] the name of the animation, if omited then uses the animation set in the component",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the animation container",
                "type": "LS.Animation"
            },
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 341,
            "description": "returns the current animation or an animation with a given name",
            "itemtype": "method",
            "name": "getTake",
            "params": [
                {
                    "name": "take_name",
                    "description": "[optional] if not specified then it uses the current take",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the duration of the take, or -1 if the take was not found or the animation is not loaded",
                "type": "Number"
            },
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 359,
            "description": "Gets the duration of the current take in the current animation",
            "itemtype": "method",
            "name": "getDuration",
            "return": {
                "description": "the duration of the take, or -1 if the take was not found or the animation is not loaded",
                "type": "Number"
            },
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 372,
            "description": "Resets the time to zero and starts playing the current take of the animation\nIt also triggers a \"start_animation\" event",
            "itemtype": "method",
            "name": "play",
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 393,
            "description": "Pauses the animation",
            "itemtype": "method",
            "name": "pause",
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 402,
            "description": "Stops the animation and sets the time to zero",
            "itemtype": "method",
            "name": "stop",
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 417,
            "description": "Starts playing the animation but only using a range of it",
            "itemtype": "method",
            "name": "playRange",
            "params": [
                {
                    "name": "start",
                    "description": "start time",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "end time",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/playAnimation.js",
            "line": 431,
            "description": "applys the animation to the scene nodes",
            "itemtype": "method",
            "name": "applyAnimation",
            "params": [
                {
                    "name": "take",
                    "description": "the name of the take",
                    "type": "String"
                },
                {
                    "name": "time",
                    "description": "the time where to sample the tracks",
                    "type": "Number"
                },
                {
                    "name": "last_time",
                    "description": "[optional] the last time that was applied, (used to trigger events)",
                    "type": "Number"
                },
                {
                    "name": "weight",
                    "description": "[optional] the weight of this animation (used for blending animation), if ommited 1 is used",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.PlayAnimation",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/script.js",
            "line": 186,
            "description": "Force to reevaluate the code (only for special situations)",
            "itemtype": "method",
            "name": "reload",
            "class": "LS.Components.Script",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/script.js",
            "line": 195,
            "description": "This is the method in charge of compiling the code and executing the constructor, which also creates the context.\nIt is called everytime the code is modified, that implies that the context is created when the component is configured.",
            "itemtype": "method",
            "name": "processCode",
            "class": "LS.Components.Script",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/script.js",
            "line": 437,
            "description": "This check if the context binds engine events to the methods in the context with an specific name.\nThis way we dont have to bind manually all the methods.",
            "itemtype": "method",
            "name": "hookEvents",
            "class": "LS.Components.Script",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/script.js",
            "line": 482,
            "description": "Called every time an event should be redirected to one function in the script context",
            "itemtype": "method",
            "name": "onScriptEvent",
            "class": "LS.Components.Script",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/script.js",
            "line": 787,
            "description": "Force to reevaluate the code (only for special situations like remove codes)",
            "itemtype": "method",
            "name": "reload",
            "params": [
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.Components.Script",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/skinnedMeshRenderer.js",
            "line": 80,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Skybox",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/skinnedMeshRenderer.js",
            "line": 103,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.Skybox",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/svgRenderer.js",
            "line": 98,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.SVGRenderer",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/svgRenderer.js",
            "line": 110,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.SVGRenderer",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 81,
            "description": "The position relative to its parent in vec3 format",
            "itemtype": "property",
            "name": "position",
            "type": "Vec3",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 134,
            "description": "The orientation relative to its parent in quaternion format",
            "itemtype": "property",
            "name": "rotation",
            "type": "Quat",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 147,
            "description": "The scaling relative to its parent in vec3 format (default is [1,1,1])",
            "itemtype": "property",
            "name": "scaling",
            "type": "Vec3",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 163,
            "description": "The local matrix transform relative to its parent in mat4 format",
            "itemtype": "property",
            "name": "matrix",
            "type": "Mat4",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 220,
            "description": "The position relative to its parent in vec3 format",
            "itemtype": "property",
            "name": "position",
            "type": "Vec3",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 231,
            "description": "The matrix transform relative to world coordinates",
            "itemtype": "property",
            "name": "globalMatrix",
            "type": "Mat4",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 246,
            "description": "The forward vector in global coordinates",
            "itemtype": "property",
            "name": "forward",
            "type": "Mat4",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 261,
            "description": "Force object to update matrices in case they were modified",
            "itemtype": "property",
            "name": "mustUpdate",
            "type": "Boolean",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 300,
            "description": "Copy the transform from another Transform",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "Transform"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 310,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 339,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 369,
            "description": "Reset this transform",
            "itemtype": "method",
            "name": "identity",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 386,
            "description": "Sets the rotation to identity",
            "itemtype": "method",
            "name": "resetRotation",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 398,
            "description": "Sets the position to 0,0,0",
            "itemtype": "method",
            "name": "resetPosition",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 410,
            "description": "Sets the scale to 1,1,1",
            "itemtype": "method",
            "name": "resetScale",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 423,
            "description": "Returns a copy of the local position",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the position",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 436,
            "description": "Returns a copy of the global position",
            "itemtype": "method",
            "name": "getGlobalPosition",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the position",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 450,
            "description": "Returns the rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getRotation",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one quat is created and returned",
                    "type": "Quat"
                }
            ],
            "return": {
                "description": "the rotation",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 462,
            "description": "Returns the global rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getRotation",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one quat is created and returned",
                    "type": "Quat"
                }
            ],
            "return": {
                "description": "the rotation",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 488,
            "description": "Returns the scale (its a copy)",
            "itemtype": "method",
            "name": "getScale",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the scale",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 500,
            "description": "Returns a copy of the global scale (this is not correct, there is no global_scale factor, because due to rotations the axis could change)",
            "itemtype": "method",
            "name": "getGlobalScale",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the scale",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 523,
            "description": "update the local Matrix to match the position,scale and rotation",
            "itemtype": "method",
            "name": "updateMatrix",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 537,
            "description": "updates the global matrix using the parents transformation",
            "itemtype": "method",
            "name": "updateGlobalMatrix",
            "params": [
                {
                    "name": "fast",
                    "description": "it doesnt recompute parent matrices, just uses the stored one, is faster but could create errors if the parent doesnt have its global matrix update",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 552,
            "description": "Returns a copy of the local matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getMatrix",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one mat4 is created and returned",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "the matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 567,
            "description": "Returns the original local matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getLocalMatrixRef",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 580,
            "description": "Returns a copy of the global matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getGlobalMatrix",
            "params": [
                {
                    "name": "out",
                    "description": "optional",
                    "type": "Mat4"
                },
                {
                    "name": "fast",
                    "description": "this flags skips recomputing parents matrices",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 599,
            "description": "Returns a copy of the global matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getGlobalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 612,
            "description": "Returns an array with all the ancestors",
            "itemtype": "method",
            "name": "getAncestors",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 626,
            "description": "Returns a quaternion with all parents rotations",
            "itemtype": "method",
            "name": "getGlobalRotation",
            "return": {
                "description": "Quaternion",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 647,
            "description": "Returns a Matrix with all parents rotations",
            "itemtype": "method",
            "name": "getGlobalRotationMatrix",
            "return": {
                "description": "Matrix rotation",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 670,
            "description": "Returns the local matrix of this transform without the rotation or scale",
            "itemtype": "method",
            "name": "getGlobalTranslationMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 681,
            "description": "Returns the global rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getGlobalRotationMatrix",
            "return": {
                "description": "the rotation",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 704,
            "description": "Returns the local matrix of this transform without the scale",
            "itemtype": "method",
            "name": "getGlobalTranslationRotationMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 718,
            "description": "Returns the matrix for the normals in the shader",
            "itemtype": "method",
            "name": "getNormalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 736,
            "description": "Configure the transform from a local Matrix (do not tested carefully)",
            "itemtype": "method",
            "name": "fromMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "the matrix in array format",
                    "type": "Mat4"
                },
                {
                    "name": "is_global",
                    "description": "tells if the matrix is in global space [optional]",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 796,
            "description": "Configure the transform from a global Matrix (do not tested carefully)",
            "itemtype": "method",
            "name": "fromGlobalMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "the matrix in array format",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 848,
            "description": "Configure the transform rotation from a vec3 Euler angles (heading,attitude,bank)",
            "itemtype": "method",
            "name": "setRotationFromEuler",
            "params": [
                {
                    "name": "src,",
                    "description": "the matrix in array format",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 860,
            "description": "sets the position",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 877,
            "description": "sets the rotation from a quaternion or from an angle(rad) and axis",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "rotation",
                    "description": "in quaterion format or angle",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 892,
            "description": "sets the scale",
            "itemtype": "method",
            "name": "setScale",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 909,
            "description": "translates object in local coordinates (using the rotation and the scale)",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 926,
            "description": "translates object in local coordinates (adds to the position)",
            "itemtype": "method",
            "name": "translateGlobal",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 943,
            "description": "rotate object in local space (axis is in local space)",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 962,
            "description": "rotate object in local space in local X axis",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "angle_in_rad",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 974,
            "description": "rotate object in local space in local Y axis",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "angle_in_rad",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 986,
            "description": "rotate object in local space in local Z axis",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "angle_in_rad",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 999,
            "description": "rotate object in global space (axis is in global space)",
            "itemtype": "method",
            "name": "rotateGlobal",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1013,
            "description": "rotate object in local space using a quat",
            "itemtype": "method",
            "name": "rotateQuat",
            "params": [
                {
                    "name": "quaternion",
                    "description": "",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1025,
            "description": "rotate object in global space using a quat",
            "itemtype": "method",
            "name": "rotateQuatGlobal",
            "params": [
                {
                    "name": "quaternion",
                    "description": "",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1037,
            "description": "scale the object",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1054,
            "description": "This method is static (call it from Transform.interpolate)\ninterpolate the transform between two transforms and stores the result in another Transform",
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Transform"
                },
                {
                    "name": "factor",
                    "description": "from 0 to 1",
                    "type": "Number"
                },
                {
                    "name": "the",
                    "description": "destination",
                    "type": "Transform"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1072,
            "description": "Orbits around a point",
            "itemtype": "method",
            "name": "orbit",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "center",
                    "description": "in local coordinates",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1099,
            "description": "Orients the transform to look from one position to another",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "in_world",
                    "description": "tells if the values are in world coordinates (otherwise asume its in local coordinates)",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1159,
            "description": "Fired when the node has changed its transform",
            "itemtype": "event",
            "name": "changed",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1170,
            "description": "returns the [0,0,-1] vector in global space",
            "itemtype": "method",
            "name": "getFront",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1179,
            "description": "returns the [0,1,0] vector in global space",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1188,
            "description": "returns the [1,0,0] vector in global space",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1197,
            "description": "Multiplies a point by the local matrix (not global)\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1212,
            "description": "convert from local coordinates to global coordinates\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "localToGlobal",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1226,
            "description": "same as localToGlobal",
            "itemtype": "method",
            "name": "transformPointGlobal",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1234,
            "description": "convert from global coordinates to local coordinates",
            "itemtype": "method",
            "name": "globalToLocal",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1252,
            "description": "Applies the transformation to a vector (rotate but not translate)",
            "itemtype": "method",
            "name": "transformVector",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1262,
            "description": "Applies the transformation to a vector (rotate but not translate)",
            "itemtype": "method",
            "name": "localVectorToGlobal",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1280,
            "description": "Apply a transform to this transform",
            "itemtype": "method",
            "name": "applyTransform",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1302,
            "description": "Applies the transformation using a matrix",
            "itemtype": "method",
            "name": "applyTransformMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "with the transform",
                    "type": "Mat4"
                },
                {
                    "name": "center",
                    "description": "different pivot [optional] if omited 0,0,0 will be used",
                    "type": "Vec3"
                },
                {
                    "name": "is_global",
                    "description": "(optional) tells if the transformation should be applied in global space or local space",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/helpers/FXstack.js",
            "line": 367,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.FXStack",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/helpers/animationCurve.js",
            "line": 21,
            "description": "Samples a curve and returns the resulting value",
            "itemtype": "method",
            "name": "getCurveValueAt",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "the position in the curve to sample",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "LS.SpatialContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/helpers/animationCurve.js",
            "line": 59,
            "description": "Resamples a full curve in values (useful to upload to GPU array)",
            "itemtype": "method",
            "name": "resampleCurve",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "numsamples",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LS.SpatialContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 143,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 168,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 189,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 212,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 251,
            "description": "Assigns a texture to a channel",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 25,
            "description": "materials have at least a basic color property and opacity",
            "itemtype": "property",
            "name": "color",
            "type": "{[[r,g,b]]}",
            "default": "[1,1,1]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 33,
            "description": "render queue: which order should this be rendered",
            "itemtype": "property",
            "name": "queue",
            "type": "{Number}",
            "default": "LS.RenderQueue.DEFAULT",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 41,
            "description": "render state: which flags should be used (in StandardMaterial this is overwritten due to the multipass lighting)\nTODO: render states should be moved to render passes defined by the shadercode in the future to allow multipasses like cellshading outline render",
            "itemtype": "property",
            "name": "render_state",
            "type": "{LS.RenderState}",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 52,
            "description": "matrix used to define texture tiling in the shader (passed as u_texture_matrix)",
            "itemtype": "property",
            "name": "uvs_matrix",
            "type": "{mat3}",
            "default": "[1,0,0, 0,1,0, 0,0,1]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 60,
            "description": "texture channels\ncontains info about the samplers for every texture channel",
            "itemtype": "property",
            "name": "textures",
            "type": "{Object}",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 68,
            "description": "used internally by LS.StandardMaterial\nThis will be gone in the future in order to use the new ShaderMaterial rendering system",
            "itemtype": "property",
            "name": "query",
            "type": "{LS.ShaderQuery}",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 76,
            "description": "flags to control cast_shadows, receive_shadows or ignore_frustum",
            "itemtype": "property",
            "name": "flags",
            "type": "{Object}",
            "default": "{ cast_shadows: true, receive_shadows: true, ignore_frutum: false }",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 96,
            "description": "The alpha component to control opacity",
            "itemtype": "property",
            "name": "opacity",
            "default": "1",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 107,
            "description": "the render queue id where this instance belongs",
            "itemtype": "property",
            "name": "queue",
            "default": "LS.RenderQueue.DEFAULT;",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 122,
            "description": "the render state flags to control how the GPU behaves",
            "itemtype": "property",
            "name": "render_state",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 153,
            "description": "Surface color",
            "itemtype": "property",
            "name": "color",
            "type": "{vec3}",
            "default": "[1,1,1]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 160,
            "description": "Opacity. It must be < 1 to enable alpha sorting. If it is <= 0 wont be visible.",
            "itemtype": "property",
            "name": "opacity",
            "type": "{number}",
            "default": "1",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 169,
            "description": "Specular glossiness: the glossines (exponent) of specular light",
            "itemtype": "property",
            "name": "specular_gloss",
            "type": "{number}",
            "default": "10",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 271,
            "description": "Configure the material getting the info from the object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 287,
            "description": "Serialize this material",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialization info",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 312,
            "description": "Clone this material (keeping the class)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Material instance",
                "type": "Material"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 325,
            "description": "Loads and assigns a texture to a channel",
            "itemtype": "method",
            "name": "loadAndSetTexture",
            "params": [
                {
                    "name": "texture_or_filename",
                    "description": "",
                    "type": "Texture || url"
                },
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 355,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getPropertiesInfo",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 374,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 387,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 505,
            "description": "gets all the texture channels supported by this material",
            "itemtype": "method",
            "name": "getTextureChannels",
            "return": {
                "description": "array with the name of every channel supported by this material",
                "type": "Array"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 516,
            "description": "Assigns a texture to a channel and its sampling parameters",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "for a list of supported channels by this material call getTextureChannels()",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "sampler_options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 565,
            "description": "Set a property of the sampling (wrap, uvs, filter)",
            "itemtype": "method",
            "name": "setTextureProperty",
            "params": [
                {
                    "name": "channel",
                    "description": "for a list of supported channels by this material call getTextureChannels()",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "could be \"uvs\", \"filter\", \"wrap\"",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value, for uvs check Material.TEXTURE_COORDINATES, filter is gl.NEAREST or gl.LINEAR and wrap gl.CLAMP_TO_EDGE, gl.MIRROR or gl.REPEAT",
                    "type": "*"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 586,
            "description": "Returns the texture in a channel",
            "itemtype": "method",
            "name": "getTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 612,
            "description": "Returns the texture sampler info of one texture channel (filter, wrap, uvs)",
            "itemtype": "method",
            "name": "getTextureSampler",
            "params": [
                {
                    "name": "channel",
                    "description": "get available channels using getTextureChannels",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 637,
            "description": "Assigns a texture sampler to one texture channel (filter, wrap, uvs)",
            "itemtype": "method",
            "name": "setTextureInfo",
            "params": [
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                },
                {
                    "name": "sampler",
                    "description": "{ texture, uvs, wrap, filter }",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 652,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 671,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if something was modified",
                "type": "Boolean"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 694,
            "description": "Loads all the textures inside this material, by sending the through the ResourcesManager",
            "itemtype": "method",
            "name": "loadTextures",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 706,
            "description": "Register this material in a materials pool to be shared with other nodes",
            "itemtype": "method",
            "name": "registerMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "name given to this material, it must be unique",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 781,
            "description": "Creates a new property in this material class. Helps with some special cases\nlike when we have a Float32Array property and we dont want it to be replaced by another array, but setted",
            "itemtype": "method",
            "name": "createProperty",
            "params": [
                {
                    "name": "name",
                    "description": "the property name as it should be accessed ( p.e.  \"color\" -> material.color )",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "type",
                    "description": "a valid value type (\"Number\",\"Boolean\",\"Texture\",...)",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/newStandardMaterial.js",
            "line": 392,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.StandardMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/newStandardMaterial.js",
            "line": 456,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getPropertiesInfo",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.StandardMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/shaderMaterial.js",
            "line": 511,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.ShaderMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/shaderMaterial.js",
            "line": 588,
            "description": "Takes an input texture and applies the ShaderMaterial, the result is shown on the viewport or stored in the output_texture\nThe ShaderCode must contain a \"fx\" method.\nSimilar to the method BlitTexture in Unity",
            "itemtype": "method",
            "name": "applyToTexture",
            "params": [
                {
                    "name": "input_texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "output_texture",
                    "description": "[optional] where to store the result, if omitted it will be shown in the viewport",
                    "type": "Texture"
                }
            ],
            "class": "LS.ShaderMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/shaderMaterial.js",
            "line": 631,
            "description": "Makes one shader variable (uniform) public so it can be assigned from the engine (or edited from the editor)",
            "itemtype": "method",
            "name": "createUniform",
            "params": [
                {
                    "name": "name",
                    "description": "the property name as it should be shown",
                    "type": "String"
                },
                {
                    "name": "uniform",
                    "description": "the uniform name in the shader",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "the var type in case we want to edit it (use LS.TYPES)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "an object containing all the possible options (used mostly for widgets)",
                    "type": "Object"
                }
            ],
            "class": "LS.ShaderMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/shaderMaterial.js",
            "line": 693,
            "description": "Similar to createUniform but for textures, it helps specifying sampler options",
            "itemtype": "method",
            "name": "createSampler",
            "params": [
                {
                    "name": "name",
                    "description": "the property name as it should be shown",
                    "type": "String"
                },
                {
                    "name": "uniform",
                    "description": "the uniform name in the shader",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "an object containing all the possible options (used mostly for widgets)",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "default value (texture name)",
                    "type": "String"
                }
            ],
            "class": "LS.ShaderMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/shaderMaterial.js",
            "line": 752,
            "description": "Creates a property for this material, this property wont be passed to the shader but can be used from source code.\nYou must used this function if you want the data to be stored when serializing or changing the ShaderCode",
            "itemtype": "method",
            "name": "createProperty",
            "params": [
                {
                    "name": "name",
                    "description": "the property name as it should be shown",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the default value",
                    "type": "*"
                },
                {
                    "name": "type",
                    "description": "the data type (use LS.TYPES)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "an object containing all the possible options (used mostly for widgets)",
                    "type": "Object"
                }
            ],
            "class": "LS.ShaderMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/shaderMaterial.js",
            "line": 795,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if something was modified",
                "type": "Boolean"
            },
            "class": "LS.ShaderMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/standardMaterial.js",
            "line": 333,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.StandardMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/standardMaterial.js",
            "line": 402,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getPropertiesInfo",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.StandardMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 152,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getPropertiesInfo",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 177,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 198,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 225,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 310,
            "description": "Assigns a texture to a channel",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 356,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/unityMaterial.js",
            "line": 59,
            "description": "Makes one shader variable (uniform) public so it can be assigned from the engine (or edited from the editor)",
            "itemtype": "method",
            "name": "createUniform",
            "params": [
                {
                    "name": "name",
                    "description": "the property name as it should be shown",
                    "type": "String"
                },
                {
                    "name": "uniform",
                    "description": "the uniform name in the shader",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "the var type in case we want to edit it (use LS.TYPES)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "an object containing all the possible options (used mostly for widgets)",
                    "type": "Object"
                }
            ],
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/unityMaterial.js",
            "line": 121,
            "description": "Similar to createUniform but for textures, it helps specifying sampler options",
            "itemtype": "method",
            "name": "createSampler",
            "params": [
                {
                    "name": "name",
                    "description": "the property name as it should be shown",
                    "type": "String"
                },
                {
                    "name": "uniform",
                    "description": "the uniform name in the shader",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "an object containing all the possible options (used mostly for widgets)",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "default value (texture name)",
                    "type": "String"
                }
            ],
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/unityMaterial.js",
            "line": 165,
            "description": "Creates a property for this material, this property wont be passed to the shader but can be used from source code.\nYou must used this function if you want the data to be stored when serializing or changing the ShaderCode",
            "itemtype": "method",
            "name": "createProperty",
            "params": [
                {
                    "name": "name",
                    "description": "the property name as it should be shown",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the default value",
                    "type": "*"
                },
                {
                    "name": "type",
                    "description": "the data type (use LS.TYPES)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "an object containing all the possible options (used mostly for widgets)",
                    "type": "Object"
                }
            ],
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/unityMaterial.js",
            "line": 514,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/unityMaterial.js",
            "line": 583,
            "description": "Takes an input texture and applies the UnityMaterial, the result is shown on the viewport or stored in the output_texture\nThe ShaderCode must contain a \"fx\" method.\nSimilar to the method BlitTexture in Unity",
            "itemtype": "method",
            "name": "applyToTexture",
            "params": [
                {
                    "name": "input_texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "output_texture",
                    "description": "[optional] where to store the result, if omitted it will be shown in the viewport",
                    "type": "Texture"
                }
            ],
            "class": "LS.UnityMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 21,
            "description": "Sets up everything (prepare meshes, shaders, and so)",
            "itemtype": "method",
            "name": "init",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 271,
            "description": "A helper to create shaders when you only want to specify some basic shading",
            "itemtype": "method",
            "name": "createSurfaceShader",
            "params": [
                {
                    "name": "surface_function",
                    "description": "GLSL code like: \"vec4 surface_function( vec3 pos, vec3 normal, vec2 coord ) { return vec4(1.0); } \";",
                    "type": "String"
                },
                {
                    "name": "macros",
                    "description": "[optional] object containing the macros and value",
                    "type": "Object"
                },
                {
                    "name": "uniforms",
                    "description": "[optional] object with name and type",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the resulting shader",
                "type": "GL.Shader"
            },
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 330,
            "description": "clears the stack",
            "itemtype": "method",
            "name": "reset",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 356,
            "description": "Sets the color used to paint primitives",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Vec3|vec4"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 376,
            "description": "Sets the alpha used to paint primitives",
            "itemtype": "method",
            "name": "setAlpha",
            "params": [
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 386,
            "description": "Sets the point size",
            "itemtype": "method",
            "name": "setPointSize",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 396,
            "description": "Sets the line width",
            "itemtype": "method",
            "name": "setLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "width in pixels",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 410,
            "description": "Sets the camera to use during the rendering, this is already done by LS.Renderer",
            "itemtype": "method",
            "name": "setCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "LS.Camera"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 425,
            "description": "Specifies the camera position (used to compute point size)",
            "itemtype": "method",
            "name": "setCameraPosition",
            "params": [
                {
                    "name": "center",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 447,
            "description": "Specifies the camera view and projection matrices",
            "itemtype": "method",
            "name": "setViewProjectionMatrix",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "Mat4"
                },
                {
                    "name": "projection",
                    "description": "",
                    "type": "Mat4"
                },
                {
                    "name": "vp",
                    "description": "viewprojection matrix [optional]",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 464,
            "description": "Specifies the transformation matrix to apply to the mesh",
            "itemtype": "method",
            "name": "setMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 474,
            "description": "Multiplies the current matrix by a given one",
            "itemtype": "method",
            "name": "multMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 484,
            "description": "Render lines given a set of points",
            "itemtype": "method",
            "name": "renderLines",
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "colors",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "strip",
                    "description": "[optional] if the lines are a line strip (one consecutive line)",
                    "type": "Bool"
                },
                {
                    "name": "loop",
                    "description": "[optional] if strip, close loop",
                    "type": "Bool"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 513,
            "description": "Render points given a set of positions (and colors)",
            "itemtype": "method",
            "name": "renderPoints",
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "colors",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "shader",
                    "description": "[optional]",
                    "type": "GL.Shader"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 549,
            "description": "Render round points given a set of positions (and colors)",
            "itemtype": "method",
            "name": "renderRoundPoints",
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "colors",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "shader",
                    "description": "[optional]",
                    "type": "GL.Shader"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 579,
            "description": "Render points with color, size, and texture binded in 0",
            "itemtype": "method",
            "name": "renderPointsWithSize",
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "colors",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "sizes",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "texture",
                    "description": "[optional]",
                    "type": "GL.Texture"
                },
                {
                    "name": "shader",
                    "description": "[optional]",
                    "type": "GL.Shader"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 627,
            "description": "Render a wireframe rectangle of width x height",
            "itemtype": "method",
            "name": "renderRectangle",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "[optional] if the plane is aligned with the z plane",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 674,
            "description": "Renders a circle",
            "itemtype": "method",
            "name": "renderCircle",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "[optional] if the circle is aligned with the z plane",
                    "type": "Boolean"
                },
                {
                    "name": "filled",
                    "description": "[optional] renders the interior",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 688,
            "description": "Render a filled circle",
            "itemtype": "method",
            "name": "renderSolidCircle",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "[optional] if the circle is aligned with the z plane",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 734,
            "description": "Renders three circles to form a simple spherical shape",
            "itemtype": "method",
            "name": "renderWireSphere",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 746,
            "description": "Renders an sphere",
            "itemtype": "method",
            "name": "renderSolidSphere",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 778,
            "description": "Renders a wire box (box made of lines, not filled)",
            "itemtype": "method",
            "name": "renderWireBox",
            "params": [
                {
                    "name": "sizex",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sizey",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sizez",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 804,
            "description": "Renders a solid box",
            "itemtype": "method",
            "name": "renderSolidBox",
            "params": [
                {
                    "name": "sizex",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sizey",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sizez",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 817,
            "description": "Renders a wire cube of size size",
            "itemtype": "method",
            "name": "renderWireCube",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 827,
            "description": "Renders a solid cube of size size",
            "itemtype": "method",
            "name": "renderSolidCube",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 837,
            "description": "Renders a solid plane (could be textured or even with an specific shader)",
            "itemtype": "method",
            "name": "renderPlane",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Vec2"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "GL.Texture"
                },
                {
                    "name": "shader",
                    "description": "",
                    "type": "GL.Shader"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 884,
            "description": "Renders a grid of lines",
            "itemtype": "method",
            "name": "renderGrid",
            "params": [
                {
                    "name": "dist",
                    "description": "distance between lines",
                    "type": "Number"
                },
                {
                    "name": "num",
                    "description": "number of lines",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 920,
            "description": "Renders a cone",
            "itemtype": "method",
            "name": "renderCone",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "aligned with z axis",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 957,
            "description": "Renders a cylinder",
            "itemtype": "method",
            "name": "renderCylinder",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "aligned with z axis",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 971,
            "description": "Renders an image",
            "itemtype": "method",
            "name": "renderImage",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "image",
                    "description": "from an URL, or a texture",
                    "type": "Image|Texture|String"
                },
                {
                    "name": "size",
                    "description": "[optional=10]",
                    "type": "Number"
                },
                {
                    "name": "fixed_size",
                    "description": "[optional=false] (camera distance do not affect size)",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1037,
            "description": "Renders a given mesh applyting the stack transformations",
            "itemtype": "method",
            "name": "renderMesh",
            "params": [
                {
                    "name": "mesh",
                    "description": "",
                    "type": "GL.Mesh"
                },
                {
                    "name": "primitive",
                    "description": "[optional=gl.TRIANGLES] GL.TRIANGLES, gl.LINES, gl.POINTS, ...",
                    "type": "Enum"
                },
                {
                    "name": "indices",
                    "description": "[optional=\"triangles\"] the name of the buffer in the mesh with the indices",
                    "type": "String"
                },
                {
                    "name": "range_start",
                    "description": "[optional] in case of rendering a range, the start primitive",
                    "type": "Number"
                },
                {
                    "name": "range_length",
                    "description": "[optional] in case of rendering a range, the number of primitives",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1083,
            "description": "Renders several meshes in one draw call, keep in mind the shader and the browser should support instancing",
            "itemtype": "method",
            "name": "renderMeshesInstanced",
            "params": [
                {
                    "name": "mesh",
                    "description": "",
                    "type": "GL.Mesh"
                },
                {
                    "name": "matrices",
                    "description": "an array containing all the matrices",
                    "type": "Array"
                },
                {
                    "name": "primitive",
                    "description": "[optional=gl.TRIANGLES] GL.TRIANGLES, gl.LINES, gl.POINTS, ...",
                    "type": "Enum"
                },
                {
                    "name": "indices",
                    "description": "[optional=\"triangles\"] the name of the buffer in the mesh with the indices",
                    "type": "String"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1121,
            "description": "Renders a text in the current matrix position",
            "itemtype": "method",
            "name": "renderText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1231,
            "description": "pushes the transform matrix into the stack to save the state",
            "itemtype": "method",
            "name": "push",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1246,
            "description": "takes the matrix from the top position of the stack to restore the last saved state",
            "itemtype": "method",
            "name": "push",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1258,
            "description": "clears the transform matrix setting it to an identity",
            "itemtype": "method",
            "name": "identity",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1267,
            "description": "changes the scale of the transform matrix. The parameters could be a vec3, a single number (then the scale is uniform in all axis) or three numbers",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "could be an array of 3, one value (if no other values are specified then it is an uniform scaling)",
                    "type": "Vec3|array|number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1292,
            "description": "applies a translation to the transform matrix",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "could be an array of 3 or the x transform",
                    "type": "Vec3|number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1311,
            "description": "applies a translation to the transform matrix",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "in degrees",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "could be the x component or the full axis",
                    "type": "Number|vec3"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1331,
            "description": "moves an object to a given position and forces it to look to another direction\nWarning: it doesnt changes the camera in any way, only the transform matrix",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/draw.js",
            "line": 1356,
            "description": "projects a point from 3D space to 2D space (multiply by MVP)",
            "itemtype": "method",
            "name": "project",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "dest",
                    "description": "[optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the point in screen space (in normalized coordinates)",
                "type": "Vec3"
            },
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderFrameContext.js",
            "line": 219,
            "description": "Called to bind the rendering to this context, from now on all the render will be stored in the textures inside",
            "itemtype": "method",
            "name": "enable",
            "class": "LS.RenderFrameContext",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderFrameContext.js",
            "line": 291,
            "description": "Called to stop rendering to this context",
            "itemtype": "method",
            "name": "disable",
            "class": "LS.RenderFrameContext",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderFrameContext.js",
            "line": 342,
            "description": "returns the texture containing the data rendered in this context",
            "itemtype": "method",
            "name": "getColorTexture",
            "params": [
                {
                    "name": "index",
                    "description": "the number of the texture (in case there is more than one)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the texture",
                "type": "GL.Texture"
            },
            "class": "LS.RenderFrameContext",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderFrameContext.js",
            "line": 354,
            "description": "returns the depth texture containing the depth data rendered in this context (in case the use_depth_texture is set to true)",
            "itemtype": "method",
            "name": "getDepthTexture",
            "return": {
                "description": "the depth texture",
                "type": "GL.Texture"
            },
            "class": "LS.RenderFrameContext",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderFrameContext.js",
            "line": 389,
            "description": "Render the context of the context to the viewport (allows to apply FXAA)",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "use_antialiasing",
                    "description": "in case you want to render with FXAA antialiasing",
                    "type": "Boolean"
                }
            ],
            "class": "LS.RenderFrameContext",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 98,
            "description": "Updates the normal matrix using the matrix",
            "itemtype": "method",
            "name": "computeNormalMatrix",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 110,
            "description": "applies a transformation to the current matrix",
            "itemtype": "method",
            "name": "applyTransform",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Mat4"
                },
                {
                    "name": "normal_matrix",
                    "description": "[optional]",
                    "type": "Mat4"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 193,
            "description": "Sets the object oriented bounding box using the BBox format (usually is the mesh bounding but in some cases could be different like with skinning or submeshes)",
            "itemtype": "method",
            "name": "setBoundinbBox",
            "params": [
                {
                    "name": "bbox",
                    "description": "bounding in bbox format",
                    "type": "BBox"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 204,
            "description": "specifies the rendering range for the mesh (from where and how many primitives), if -1 then ignored",
            "itemtype": "method",
            "name": "setRange",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 217,
            "description": "Enable flag in the flag bit field",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 228,
            "description": "Disable flag in the flag bit field",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 239,
            "description": "Tells if a flag is enabled",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "flag value",
                "type": "Boolean"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 251,
            "description": "Computes the instance bounding box in world space from the one in local space",
            "itemtype": "method",
            "name": "updateAABB",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 261,
            "description": "Used to update the RI info without having to go through the collectData process, it is faster but some changes may take a while",
            "itemtype": "method",
            "name": "update",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 273,
            "description": "Calls render taking into account primitive and range",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "shader",
                    "description": "",
                    "type": "Shader"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 434,
            "description": "Checks if this object was visible by a camera during the last frame",
            "itemtype": "method",
            "name": "wasVisibleByCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "[optional] if a camera is supplied it checks if it was visible by that camera, otherwise tells you if it was visible by any camera",
                    "type": "LS.Camera"
                }
            ],
            "return": {
                "description": "true if it was visible by the camera (or any camera if no camera supplied), false otherwise",
                "type": "Boolean"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 181,
            "description": "Renders the current scene to the screen\nMany steps are involved, from gathering info from the scene tree, generating shadowmaps, setup FBOs, render every camera\nIf you want to change the rendering pipeline, do not overwrite this function, try to understand it first, otherwise you will miss lots of features",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                },
                {
                    "name": "cameras",
                    "description": "if no cameras are specified the cameras are taken from the scene",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 297,
            "description": "Calls renderFrame of every camera in the cameras list (triggering the appropiate events)",
            "itemtype": "method",
            "name": "renderFrameCameras",
            "params": [
                {
                    "name": "cameras",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 326,
            "description": "renders the view from one camera to the current viewport (could be the screen or a texture)",
            "itemtype": "method",
            "name": "renderFrame",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "scene",
                    "description": "[optional] this can be passed when we are rendering a different scene from LS.GlobalScene (used in renderMaterialPreview)",
                    "type": "SceneTree"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 375,
            "description": "Sets camera as the current camera, sets the viewport according to camera info, updates matrices, and prepares LS.Draw",
            "itemtype": "method",
            "name": "enableCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 437,
            "description": "Returns the camera active",
            "itemtype": "method",
            "name": "getCurrentCamera",
            "return": {
                "description": "camera",
                "type": "Camera"
            },
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 448,
            "description": "clear color using camera info ( background color, viewport scissors, clear depth, etc )",
            "itemtype": "method",
            "name": "clearBuffer",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "LS.RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 505,
            "description": "To set gl state to a known and constant state in every render pass",
            "itemtype": "method",
            "name": "resetGLState",
            "params": [
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 536,
            "description": "Calls the render method for every RenderInstance (it also takes into account events and frustrum culling)",
            "itemtype": "method",
            "name": "renderInstances",
            "params": [
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                },
                {
                    "name": "instances",
                    "description": "array of RIs, if not specified the last visible_instances are rendered",
                    "type": "Array"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 713,
            "description": "returns a list of all the lights overlapping this instance (it uses sperical bounding so it could returns lights that are not really overlapping)\nIt is used by the multipass lighting to iterate",
            "itemtype": "method",
            "name": "getNearLights",
            "params": [
                {
                    "name": "instance",
                    "description": "the render instance",
                    "type": "RenderInstance"
                },
                {
                    "name": "result",
                    "description": "[optional] the output array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array containing a list of LS.Light affecting this RenderInstance",
                "type": "Array"
            },
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 796,
            "description": "Renders the RenderInstance taking into account all the lights that affect it and doing a render for every light\nThis function it is not as fast as I would like but enables lots of interesting features",
            "itemtype": "method",
            "name": "renderColorMultiPassLightingInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                },
                {
                    "name": "lights",
                    "description": "array containing al the lights affecting this RI",
                    "type": "Array"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 924,
            "description": "Renders this RenderInstance into the shadowmap",
            "itemtype": "method",
            "name": "renderShadowPassInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 968,
            "description": "Render instance into the picking buffer",
            "itemtype": "method",
            "name": "renderPickingInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1124,
            "description": "Update the scene shader query according to the render pass\nDo not reuse the query, they change between rendering passes (shadows, reflections, etc)",
            "itemtype": "method",
            "name": "fillSceneShaderQuery",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1213,
            "description": "Collects and process the rendering instances, cameras and lights that are visible\nIts a prepass shared among all rendering passes\nWarning: rendering order is computed here, so it is shared among all the cameras (TO DO, move somewhere else)",
            "itemtype": "method",
            "name": "processVisibleData",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                },
                {
                    "name": "cameras",
                    "description": "in case you dont want to use the scene cameras",
                    "type": "Array"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1400,
            "description": "Renders a frame into a texture (could be a cubemap, in which case does the six passes)",
            "itemtype": "method",
            "name": "renderInstancesToRT",
            "params": [
                {
                    "name": "cam",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1438,
            "description": "Renders the current scene to a cubemap centered in the given position",
            "itemtype": "method",
            "name": "renderToCubemap",
            "params": [
                {
                    "name": "position",
                    "description": "center of the camera where to render the cubemap",
                    "type": "Vec3"
                },
                {
                    "name": "size",
                    "description": "texture size",
                    "type": "Number"
                },
                {
                    "name": "texture",
                    "description": "to reuse the same texture",
                    "type": "Texture"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                },
                {
                    "name": "near",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting texture",
                "type": "Texture"
            },
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1491,
            "description": "Renders the material preview to an image (or to the screen)",
            "itemtype": "method",
            "name": "renderMaterialPreview",
            "params": [
                {
                    "name": "material",
                    "description": "",
                    "type": "Material"
                },
                {
                    "name": "size",
                    "description": "image size",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "could be environment_texture, to_viewport",
                    "type": "Object"
                },
                {
                    "name": "canvas",
                    "description": "[optional] the output canvas where to store the preview",
                    "type": "HTMLCanvas"
                }
            ],
            "return": {
                "description": "the preview image (in canvas format) or null if it was rendered to the viewport",
                "type": "Image"
            },
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1576,
            "description": "Returns the last camera that falls into a given screen position",
            "itemtype": "method",
            "name": "getCameraAtPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scene",
                    "description": "if not specified last rendered scene will be used",
                    "type": "SceneTree"
                }
            ],
            "return": {
                "description": "the camera",
                "type": "Camera"
            },
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1603,
            "description": "Sets the render pass to use, this allow to change between \"color\",\"shadow\",\"picking\",etc",
            "itemtype": "method",
            "name": "setRenderPass",
            "params": [
                {
                    "name": "name",
                    "description": "name of the render pass as in render_passes",
                    "type": "String"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1614,
            "description": "Register a render pass to be used during the rendering",
            "itemtype": "method",
            "name": "registerRenderPass",
            "params": [
                {
                    "name": "name",
                    "description": "name of the render pass as in render_passes",
                    "type": "String"
                },
                {
                    "name": "info",
                    "description": "render pass info, { render_instance: Function( instance, render_settings ) }",
                    "type": "Object"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1629,
            "description": "Adds a new RenderQueue to the Renderer.",
            "itemtype": "method",
            "name": "addRenderQueue",
            "params": [
                {
                    "name": "name",
                    "description": "name of the render pass as in render_passes",
                    "type": "RenderQueue"
                },
                {
                    "name": "sorting",
                    "description": "which algorithm use to sort ( LS.RenderQueue.NO_SORT, LS.RenderQueue.SORT_NEAR_TO_FAR, LS.RenderQueue.SORT_FAR_TO_NEAR )",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "extra stuff to add to the queue ( like callbacks onStart, onFinish )",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "index of the render queue",
                "type": "Number"
            },
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1653,
            "description": "Enables a ShaderBlock ONLY DURING THIS FRAME",
            "itemtype": "method",
            "name": "enableFrameShaderBlock",
            "params": [
                {
                    "name": "shader_block_name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 31,
            "description": "Create a new take inside this animation (a take contains all the tracks)",
            "itemtype": "method",
            "name": "createTake",
            "params": [
                {
                    "name": "name",
                    "description": "the name",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the take",
                "type": "LS.Animation.Take"
            },
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 52,
            "description": "adds an existing take",
            "itemtype": "method",
            "name": "addTake",
            "params": [
                {
                    "name": "name",
                    "description": "the name",
                    "type": "LS.Animation.Take"
                }
            ],
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 63,
            "description": "returns the take with a given name",
            "itemtype": "method",
            "name": "getTake",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the take",
                "type": "LS.Animation.Take"
            },
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 74,
            "description": "renames a take name",
            "itemtype": "method",
            "name": "renameTake",
            "params": [
                {
                    "name": "old_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "new_name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 91,
            "description": "removes a take",
            "itemtype": "method",
            "name": "removeTake",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 105,
            "description": "returns the number of takes",
            "itemtype": "method",
            "name": "getNumTakes",
            "return": {
                "description": "the number of takes",
                "type": "Number"
            },
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 253,
            "description": "changes the packing mode of the tracks inside all takes",
            "itemtype": "method",
            "name": "setTracksPacking",
            "params": [
                {
                    "name": "pack",
                    "description": "if true the tracks will be packed (used a typed array)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "te number of modifyed tracks",
                "type": "Number"
            },
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 270,
            "description": "optimize all the tracks in all the takes, so they take less space and are faster to compute (when possible)",
            "itemtype": "method",
            "name": "optimizeTracks",
            "return": {
                "description": "the number of takes",
                "type": "Number"
            },
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 286,
            "description": "It creates a PlayAnimation component to the node (or reuse and old existing one). Used when a resource is assigned to a node",
            "itemtype": "method",
            "name": "assignToNode",
            "params": [
                {
                    "name": "node",
                    "description": "node where to assign this animation",
                    "type": "LS.SceneNode"
                }
            ],
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 312,
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "LS.Animation.Take",
            "namespace": "LS.Animation"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 316,
            "itemtype": "property",
            "name": "tracks",
            "type": "Array",
            "class": "LS.Animation.Take",
            "namespace": "LS.Animation"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 320,
            "itemtype": "property",
            "name": "duration  in seconds",
            "type": "Number",
            "class": "LS.Animation.Take",
            "namespace": "LS.Animation"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 352,
            "description": "creates a new track from a given data",
            "itemtype": "method",
            "name": "createTrack",
            "params": [
                {
                    "name": "data",
                    "description": "in serialized format",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the track",
                "type": "LS.Animation.Track"
            },
            "class": "LS.Animation.Take",
            "namespace": "LS.Animation"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 372,
            "description": "For every track, gets the interpolated value between keyframes and applies the value to the property associated with the track locator\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "applyTracks",
            "params": [
                {
                    "name": "current_time",
                    "description": "the time of the anim to sample",
                    "type": "Number"
                },
                {
                    "name": "last_time",
                    "description": "this is used for events, we need to know where you were before",
                    "type": "Number"
                },
                {
                    "name": "ignore_interpolation",
                    "description": "in case you want to sample the nearest one",
                    "type": "Boolean"
                },
                {
                    "name": "weight",
                    "description": "[Optional] allows to blend animations with current value (default is 1)",
                    "type": "SceneNode"
                },
                {
                    "name": "root",
                    "description": "[Optional] if you want to limit the locator to search inside a node",
                    "type": "Number"
                },
                {
                    "name": "on_pre_apply",
                    "description": "[Optional] a callback called per track to see if this track should be applyed, if it returns false it is skipped. callback receives (track, current_time, root_node, weight)",
                    "type": "Function"
                },
                {
                    "name": "on_apply_sample",
                    "description": "[Optional] a callback called before applying a keyframe, if the callback returns false the keyframe will be skipped. callback parameters ( track, sample, root_node, weight )",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the target where the action was performed",
                "type": "Component"
            },
            "class": "LS.Animation.Take",
            "namespace": "LS.Animation"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 565,
            "description": "Optimizes the tracks by changing the Matrix tracks to Trans10 tracks which are way faster and use less space",
            "itemtype": "method",
            "name": "optimizeTracks",
            "class": "LS.Animation.Take",
            "namespace": "LS.Animation"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 624,
            "description": "If this is a transform track it removes translation and scale leaving only rotations",
            "itemtype": "method",
            "name": "onlyRotations",
            "class": "LS.Animation.Take",
            "namespace": "LS.Animation"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 641,
            "description": "removes scaling in transform tracks",
            "itemtype": "method",
            "name": "removeScaling",
            "class": "LS.Animation.Take",
            "namespace": "LS.Animation"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 714,
            "itemtype": "property",
            "name": "enabled  if it must be applied",
            "type": "Boolean",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 718,
            "itemtype": "property",
            "name": "name  title to show in the editor",
            "type": "String",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 722,
            "itemtype": "property",
            "name": "type  if the data is number, vec2, color, etc",
            "type": "String",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 727,
            "itemtype": "property",
            "name": "interpolation  type of interpolation LS.NONE, LS.LINEAR, LS.TRIGONOMETRIC, LS.BEZIER, LS.SPLICE",
            "type": "Number",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 731,
            "itemtype": "property",
            "name": "looped  if the last and the first keyframe should be connected",
            "type": "Boolean",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 739,
            "itemtype": "property",
            "name": "data  contains all the keyframes, could be an array or a typed array",
            "type": "*",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 770,
            "itemtype": "property",
            "name": "property  the locator to the property this track should modify ( \"node/component_uid/property\" )",
            "type": "String",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 882,
            "description": "used to change every track so instead of using UIDs for properties it uses node names\nthis is used when you want to apply the same animation to different nodes in the scene",
            "itemtype": "method",
            "name": "getIDasName",
            "params": [
                {
                    "name": "use_basename",
                    "description": "if you want to just use the node name, othewise it uses the fullname (name with path)",
                    "type": "Boolean"
                },
                {
                    "name": "root",
                    "description": "",
                    "type": "LS.SceneNode"
                }
            ],
            "return": {
                "description": "the result name",
                "type": "String"
            },
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 947,
            "description": "Adds a new keyframe to this track",
            "itemtype": "method",
            "name": "addKeyframe",
            "params": [
                {
                    "name": "time",
                    "description": "time stamp in seconds",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "anything you want to store",
                    "type": "*"
                },
                {
                    "name": "skip_replace",
                    "description": "if you want to replace existing keyframes at same time stamp or add it next to that",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "index of keyframe",
                "type": "Number"
            },
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 981,
            "description": "returns a keyframe given an index",
            "itemtype": "method",
            "name": "getKeyframe",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the keyframe in [time,data] format",
                "type": "Array"
            },
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1007,
            "description": "returns the first keyframe that matches this time",
            "itemtype": "method",
            "name": "getKeyframeByTime",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "keyframe in [time,value]",
                "type": "Array"
            },
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1021,
            "description": "changes a keyframe time and rearranges it",
            "itemtype": "method",
            "name": "moveKeyframe",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "new_time",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "new index",
                "type": "Number"
            },
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1078,
            "description": "removes one keyframe",
            "itemtype": "method",
            "name": "removeKeyframe",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1135,
            "description": "takes all the keyframes and stores them inside a typed-array so they are faster to store in server or work with",
            "itemtype": "method",
            "name": "packData",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1167,
            "description": "takes all the keyframes and unpacks them so they are in a simple array, easier to work with",
            "itemtype": "method",
            "name": "unpackData",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1190,
            "description": "returns nearest index of keyframe with time equal or less to specified time (Dichotimic search)",
            "itemtype": "method",
            "name": "findTimeIndex",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "index",
                "type": "Number"
            },
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1536,
            "description": "returns information about the object being affected by this track based on its locator\nthe object contains a reference to the object, the property name, the type of the data",
            "itemtype": "method",
            "name": "getPropertyInfo",
            "params": [
                {
                    "name": "scene",
                    "description": "[optional]",
                    "type": "LS.SceneTree"
                }
            ],
            "return": {
                "description": "an object with the info { target, name, type, value }",
                "type": "Object"
            },
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1550,
            "description": "returns an array containing N samples for this property over time using the interpolation of the track",
            "itemtype": "method",
            "name": "getSampledData",
            "params": [
                {
                    "name": "start_time",
                    "description": "when to start sampling",
                    "type": "Number"
                },
                {
                    "name": "end_time",
                    "description": "when to finish sampling",
                    "type": "Number"
                },
                {
                    "name": "num_samples",
                    "description": "the number of samples",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "an array containing all the samples",
                "type": "Array"
            },
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1577,
            "description": "removes keyframes that are before or after the time range",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "start",
                    "description": "time",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "time",
                    "type": "Number"
                }
            ],
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1607,
            "description": "Scales the time in every keyframe",
            "itemtype": "method",
            "name": "stretch",
            "params": [
                {
                    "name": "scale",
                    "description": "the sacle to apply to all times",
                    "type": "Number"
                }
            ],
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1622,
            "description": "If the track used matrices, it transform them to position,quaternion and scale (10 floats, also known as trans10)\nthis makes working with animations faster",
            "itemtype": "method",
            "name": "convertToTrans10",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/animation.js",
            "line": 1661,
            "description": "If this track changes the scale, it forces it to be 1,1,1",
            "itemtype": "method",
            "name": "removeScaling",
            "class": "LS.Animation.Track",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/pack.js",
            "line": 23,
            "description": "configure the pack from an unpacked WBin",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "data",
                    "description": "an unpacked WBIN (object with every chunk)",
                    "type": "Object"
                }
            ],
            "class": "LS.Pack",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/pack.js",
            "line": 162,
            "description": "to create a WBin containing all the resource and metadata",
            "itemtype": "method",
            "name": "Pack.createWBin",
            "params": [
                {
                    "name": "fullpath",
                    "description": "for the pack",
                    "type": "String"
                },
                {
                    "name": "resource_names",
                    "description": "array with the names of all the resources to store",
                    "type": "Array"
                },
                {
                    "name": "metadata",
                    "description": "[optional] extra data to store",
                    "type": "Object"
                },
                {
                    "name": "mark_them",
                    "description": "[optional] marks all the resources as if they come from a pack",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "object containing the pack data ready to be converted to WBin"
            },
            "class": "LS.Pack",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/prefab.js",
            "line": 26,
            "description": "assign the json object",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object|SceneNode"
                }
            ],
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/prefab.js",
            "line": 40,
            "description": "configure the prefab",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/prefab.js",
            "line": 134,
            "description": "Creates an instance of the object inside the prefab",
            "itemtype": "method",
            "name": "createObject",
            "return": {
                "description": "object contained"
            },
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/prefab.js",
            "line": 163,
            "description": "to create a new prefab, it packs all the data an instantiates the resource",
            "itemtype": "method",
            "name": "Prefab.createPrefab",
            "params": [
                {
                    "name": "filename",
                    "description": "a name for this prefab (if wbin is not appended, it will)",
                    "type": "String"
                },
                {
                    "name": "node_data",
                    "description": "an object containing all the node data to store",
                    "type": "Object"
                },
                {
                    "name": "resource_names_list",
                    "description": "an array with the name of the resources to store",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "object containing the prefab data ready to be converted to WBin (it also stores _original_data with the WBin)"
            },
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/resource.js",
            "line": 34,
            "itemtype": "method",
            "name": "rename",
            "class": "LS.Resource",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/resource.js",
            "line": 42,
            "itemtype": "method",
            "name": "rename",
            "params": [
                {
                    "name": "new_filename",
                    "description": "the new filename",
                    "type": "String"
                }
            ],
            "class": "LS.Resource",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/resource.js",
            "line": 57,
            "description": "Static method: Returns an object with a representation of the resource internal data\nThe order to obtain that object is:\n0. checks if getDataToStore function in resource\n1. test for _original_file (File or Blob)\n2. test for _original_data (ArrayBuffer)\n3. toBinary() (ArrayBuffer)\n4. toBlob() (Blob)\n5. toBase64() (String)\n6. serialize() (Object in JSON format)\n7. data property \n8. JSON.stringify(...)",
            "itemtype": "method",
            "name": "Resource.getDataToStore",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "allow_blob",
                    "description": "[optional]",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "it has two fields: data and encoding",
                "type": "Object"
            },
            "class": "LS.Resource",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/resource.js",
            "line": 169,
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "the clone of the resource",
                "type": "LS.Resource"
            },
            "class": "LS.Resource",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/resource.js",
            "line": 180,
            "itemtype": "method",
            "name": "getCategory",
            "class": "LS.Resource",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/resource.js",
            "line": 192,
            "itemtype": "method",
            "name": "assignToNode",
            "class": "LS.Resource",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/resource.js",
            "line": 212,
            "itemtype": "method",
            "name": "getAsSubfiles",
            "return": {
                "description": "the object that contains every subfile",
                "type": "Object"
            },
            "class": "LS.Resource",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/resource.js",
            "line": 223,
            "itemtype": "method",
            "name": "getAsHTML",
            "return": {
                "description": "the root HTMLElement that contains the code",
                "type": "HTMLElement"
            },
            "class": "LS.Resource",
            "namespace": "LS"
        },
        {
            "file": "../src/resources/resource.js",
            "line": 237,
            "itemtype": "method",
            "name": "hasEditableText",
            "class": "LS.Resource",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 58,
            "description": "Allows to check if one Uint8Array contains a WBin file",
            "itemtype": "method",
            "name": "WBin.isWBin",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "UInt8Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 73,
            "description": "Builds a WBin data stream from an object (every property of the object will be considered a lump with data)\nIt supports Numbers, Strings and TypedArrays or ArrayBuffer",
            "itemtype": "method",
            "name": "WBin.create",
            "params": [
                {
                    "name": "origin",
                    "description": "object containing all the lumps, the key will be used as lump name",
                    "type": "Object"
                },
                {
                    "name": "origin_class_name",
                    "description": "[Optional] allows to add a classname to the WBin, this is used to detect which class to instance when extracting it",
                    "type": "String"
                }
            ],
            "return": {
                "description": "all the bytes",
                "type": "Uint8Array"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 220,
            "description": "Extract the info from a Uint8Array containing WBin info and returns the object with all the lumps.\nIf the data contains info about the class to instantiate, the WBin instantiates the class and passes the data to it",
            "itemtype": "method",
            "name": "WBin.load",
            "params": [
                {
                    "name": "data_array",
                    "description": "",
                    "type": "UInt8Array"
                },
                {
                    "name": "skip_classname",
                    "description": "avoid getting the instance of the class specified in classname, and get only the lumps",
                    "type": "Bool"
                },
                {
                    "name": "filename",
                    "description": "[optional] the filename where this wbin came from (important to mark resources)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Could be an Object with all the lumps or an instance to the class specified in the WBin data",
                "type": "*"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 317,
            "description": "Extract the header info from an ArrayBuffer (it contains version, and lumps info)",
            "itemtype": "method",
            "name": "WBin.getHeaderInfo",
            "params": [
                {
                    "name": "data_array",
                    "description": "",
                    "type": "UInt8Array"
                }
            ],
            "return": {
                "description": "Header",
                "type": "Object"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 34,
            "description": "Returns the node where this components is attached",
            "itemtype": "method",
            "name": "getRootNode",
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 43,
            "description": "Configures the components based on an object that contains the serialized info",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 60,
            "description": "Returns an object with all the info about this component in an object form",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 79,
            "description": "Create a clone of this node (the UID is removed to avoid collisions)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "component clone",
                "type": "*"
            },
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 92,
            "description": "To create a new property for this component adding some extra useful info to help the editor",
            "itemtype": "method",
            "name": "createProperty",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the property as it will be accessed",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to assign by default to this property",
                    "type": "*"
                },
                {
                    "name": "type",
                    "description": "[optional] an string identifying the type of the variable, could be \"number\",\"string\",\"Texture\",\"vec3\",\"mat4\", or an object with all the info",
                    "type": "String|Object"
                },
                {
                    "name": "setter",
                    "description": "[optional] setter function, otherwise one will be created",
                    "type": "Function"
                },
                {
                    "name": "getter",
                    "description": "[optional] getter function, otherwise one will be created",
                    "type": "Function"
                }
            ],
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 217,
            "description": "Returns the locator string of this component",
            "itemtype": "method",
            "name": "getLocator",
            "params": [
                {
                    "name": "property_name",
                    "description": "[optional] you can pass the name of a property in this component",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the locator string of this component",
                "type": "String"
            },
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 291,
            "description": "calls a method in all components in this node and all the children nodes",
            "itemtype": "method",
            "name": "broadcastMessage",
            "params": [
                {
                    "name": "method_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 305,
            "description": "returns the first component of type class_name of the SceneNode where this component belongs",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "class_name",
                    "description": "the name of the class in string format or the component class itself",
                    "type": "String|Component"
                }
            ],
            "return": {
                "description": "Component or null",
                "type": "*"
            },
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 318,
            "description": "Bind one object event to a method in this component",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "object",
                    "description": "the dispatcher of the event you want to react to",
                    "type": "*"
                },
                {
                    "name": "event",
                    "description": "the name of the event to bind to",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the callback to call",
                    "type": "Function"
                },
                {
                    "name": "type",
                    "description": "[optional] an string identifying the type of the variable, could be \"number\",\"string\",\"Texture\",\"vec3\",\"mat4\", or an object with all the info",
                    "type": "String|Object"
                },
                {
                    "name": "setter",
                    "description": "[optional] setter function, otherwise one will be created",
                    "type": "Function"
                },
                {
                    "name": "getter",
                    "description": "[optional] getter function, otherwise one will be created",
                    "type": "Function"
                }
            ],
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 21,
            "description": "Adds a component to this node.",
            "itemtype": "method",
            "name": "configureComponents",
            "params": [
                {
                    "name": "info",
                    "description": "object containing all the info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 90,
            "description": "Adds a component to this node.",
            "itemtype": "method",
            "name": "serializeComponents",
            "params": [
                {
                    "name": "o",
                    "description": "container where the components will be stored",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 147,
            "description": "returns an array with all the components",
            "itemtype": "method",
            "name": "getComponents",
            "return": {
                "description": "all the components",
                "type": "Array"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 171,
            "description": "Adds a component to this node. (maybe attach would been a better name)",
            "itemtype": "method",
            "name": "addComponent",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "component added",
                "type": "Object"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 229,
            "description": "Removes a component from this node.",
            "itemtype": "method",
            "name": "removeComponent",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 266,
            "description": "Removes all components from this node.",
            "itemtype": "method",
            "name": "removeAllComponents",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 279,
            "description": "Returns if the container has a component of this class",
            "itemtype": "method",
            "name": "hasComponent",
            "params": [
                {
                    "name": "component_class",
                    "description": "the component to search for, could be a string or the class itself",
                    "type": "String|Class"
                },
                {
                    "name": "search_missing",
                    "description": "[optional] true if you want to search in the missing components too",
                    "type": "Boolean"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 317,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "component_class",
                    "description": "the class to search a component from (could be the class or the name)",
                    "type": "Object|String"
                },
                {
                    "name": "index",
                    "description": "[optional] if you want the Nth component of this class",
                    "type": "Number"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 373,
            "description": "Returns the component with the given uid",
            "itemtype": "method",
            "name": "getComponentByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "the uid to search",
                    "type": "String"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 388,
            "description": "Returns the position in the components array of this component",
            "itemtype": "method",
            "name": "getIndexOfComponent",
            "params": [
                {
                    "name": "position",
                    "description": "in the array, -1 if not found",
                    "type": "Number"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 400,
            "description": "Returns the component at index position",
            "itemtype": "method",
            "name": "getComponentByIndex",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 412,
            "description": "Returns a list of components matching the search, it search in the node and child nodes",
            "itemtype": "method",
            "name": "findComponent",
            "params": [
                {
                    "name": "component",
                    "description": "the component class or the class name",
                    "type": "Class|String"
                }
            ],
            "return": {
                "description": "an array with all the components of the same class",
                "type": "Array"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 441,
            "description": "Changes the order of a component",
            "itemtype": "method",
            "name": "setComponentIndex",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 470,
            "description": "Ensures this node has a component of the specified class, if not it creates one and attaches it",
            "itemtype": "method",
            "name": "requireComponent",
            "params": [
                {
                    "name": "component_class",
                    "description": "the class to search a component from (could be the class or the name)",
                    "type": "Object|String"
                },
                {
                    "name": "data",
                    "description": "[optional] the object to configure the component from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the component found or created",
                "type": "Component"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 508,
            "description": "Ensures this node has a ScriptFromFile component of the specified script url, if not it creates one and attaches it",
            "itemtype": "method",
            "name": "requireScript",
            "params": [
                {
                    "name": "url",
                    "description": "the url to the script",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the ScriptFromFile component found or created",
                "type": "Component"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 537,
            "description": "executes the method with a given name in all the components",
            "itemtype": "method",
            "name": "processActionInComponents",
            "params": [
                {
                    "name": "method_name",
                    "description": "the name of the function to execute in all components (in string format)",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "array with every parameter that the function may need",
                    "type": "Array"
                },
                {
                    "name": "skip_scripts",
                    "description": "[optional] skip scripts",
                    "type": "Boolean"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 569,
            "description": "executes the method with a given name in all the components and its children",
            "itemtype": "method",
            "name": "broadcastMessage",
            "params": [
                {
                    "name": "method_name",
                    "description": "the name of the function to execute in all components (in string format)",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "array with every parameter that the function may need",
                    "type": "Array"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 28,
            "description": "Adds one child to this instance",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "index",
                    "description": "[optional]  in which position you want to insert it, if not specified it goes to the last position",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "[optional] data to be passed when adding it, used for special cases when moving nodes around",
                    "type": "*"
                }
            ],
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 122,
            "description": "Removes the node from its parent (and from the scene tree)",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "node",
                    "description": "this child to remove",
                    "type": "Node"
                },
                {
                    "name": "param1",
                    "description": "data passed to onChildRemoved",
                    "type": "*"
                },
                {
                    "name": "param2",
                    "description": "data passed to onChildRemoved as second parameter",
                    "type": "*"
                }
            ],
            "return": {
                "description": "returns true if it was found and removed",
                "type": "Boolean"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 179,
            "description": "Remove every child node",
            "itemtype": "method",
            "name": "removeAllChildren",
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 191,
            "description": "Serialize the data from all the children",
            "itemtype": "method",
            "name": "serializeChildren",
            "return": {
                "description": "array containing all serialized data from every children",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 206,
            "description": "Configure every children with the data",
            "itemtype": "method",
            "name": "configureChildren",
            "return": {
                "description": "o array containing all serialized data",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 235,
            "description": "Returns parent node",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "parent node",
                "type": "SceneNode"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 246,
            "description": "returns a list with all direct children (if you want below that use getDescendants)",
            "itemtype": "method",
            "name": "getChildren",
            "params": [
                {
                    "name": "Original",
                    "description": "array containing the children",
                    "type": "Array"
                }
            ],
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 256,
            "description": "returns the index of a child in the children array",
            "itemtype": "method",
            "name": "getChildIndex",
            "params": [
                {
                    "name": "child",
                    "description": "the child to search for",
                    "type": "SceneNode"
                }
            ],
            "return": {
                "description": "the index of this child in the array, if it is not inside returns -1",
                "type": "Number"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 267,
            "description": "Returns the child in the index position",
            "itemtype": "method",
            "name": "getChildByIndex",
            "params": [
                {
                    "name": "index",
                    "description": "the index in the array",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the child in that position",
                "type": "SceneNode"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 278,
            "description": "Returns the child that matches that name",
            "itemtype": "method",
            "name": "getChildByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the child with that name otherwise returns null;",
                "type": "SceneNode"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 296,
            "description": "Returns the path name of the node (a path name is a concatenation of the name of the nodes an its ancestors: \"root|parent|child\"",
            "itemtype": "method",
            "name": "getPathName",
            "return": {
                "description": "the pathname",
                "type": "String"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 352,
            "description": "get all nodes below this in the hierarchy (children and children of children)",
            "itemtype": "method",
            "name": "getDescendants",
            "return": {
                "description": "array containing all descendants",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 368,
            "description": "Swaps the index in the children array so it is before",
            "itemtype": "method",
            "name": "moveBefore",
            "params": [
                {
                    "name": "sibling",
                    "description": "[optional] allows to put before given node, otherwise it will be moved one position before of current position",
                    "type": "SceneNode"
                }
            ],
            "return": {
                "description": "new index",
                "type": "Number"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 404,
            "description": "Swaps the index in the children array so it is before",
            "itemtype": "method",
            "name": "moveAfter",
            "params": [
                {
                    "name": "sibling",
                    "description": "[optional] allows to put after given node, otherwise it will be moved one position after current position",
                    "type": "SceneNode"
                }
            ],
            "return": {
                "description": "new index",
                "type": "Number"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 441,
            "description": "Search for a node using a string that could be a name, a fullname or a uid",
            "itemtype": "method",
            "name": "findNode",
            "params": [
                {
                    "name": "name_or_uid",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null",
                "type": "SceneNode"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 458,
            "description": "search a node by its name\nthis function gets called a lot when using animations",
            "itemtype": "method",
            "name": "findNodeByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null",
                "type": "SceneNode"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 493,
            "description": "search a node by its uid",
            "itemtype": "method",
            "name": "findNodeByUId",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null",
                "type": "SceneNode"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 525,
            "description": "returns how many levels deep is the node in the hierarchy",
            "itemtype": "method",
            "name": "getHierarchyLevel",
            "return": {
                "description": "the level, 0 if it is the root",
                "type": "Number"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 36,
            "description": "Generates a UUID based in the user-agent, time, random and sequencial number. Used for Nodes and Components.",
            "itemtype": "method",
            "name": "generateUId",
            "return": {
                "description": "uuid",
                "type": "String"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 52,
            "description": "validates name string to ensure there is no forbidden characters\nvalid characters are letters, numbers, spaces, dash, underscore and dot",
            "itemtype": "method",
            "name": "validateName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 80,
            "description": "Contains all the registered components",
            "itemtype": "property",
            "name": "Components",
            "type": "{Object}",
            "default": "{}",
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 89,
            "description": "Register a component (or several) so it is listed when searching for new components to attach",
            "itemtype": "method",
            "name": "registerComponent",
            "params": [
                {
                    "name": "component",
                    "description": "component class to register",
                    "type": "Component"
                },
                {
                    "name": "old_classname",
                    "description": "[optional] the name of the component that this class replaces (in case you are renaming it)",
                    "type": "String"
                }
            ],
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 149,
            "description": "Unregisters a component from the system (although existing instances are kept in the scene)",
            "itemtype": "method",
            "name": "unregisterComponent",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the component to unregister",
                    "type": "String"
                }
            ],
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 164,
            "description": "Tells you if one class is a registered component class",
            "itemtype": "method",
            "name": "isClassComponent",
            "params": [
                {
                    "name": "comp",
                    "description": "component class to evaluate",
                    "type": "ComponentClass"
                }
            ],
            "return": {
                "description": "true if the component class is registered",
                "type": "Boolean"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 177,
            "description": "Replaces all components of one class in the scene with components of another class",
            "itemtype": "method",
            "name": "replaceComponentClass",
            "params": [
                {
                    "name": "scene",
                    "description": "where to apply the replace",
                    "type": "SceneTree"
                },
                {
                    "name": "old_class_name",
                    "description": "name of the class to be replaced",
                    "type": "String"
                },
                {
                    "name": "new_class_name",
                    "description": "name of the class that will be used instead",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the number of components replaced",
                "type": "Number"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 262,
            "description": "Register a resource class so we know which classes could be use as resources",
            "itemtype": "method",
            "name": "registerResourceClass",
            "params": [
                {
                    "name": "c",
                    "description": "component class to register",
                    "type": "ComponentClass"
                }
            ],
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 308,
            "description": "Returns a Promise that will be fulfilled once the time has passed",
            "itemtype": "method",
            "name": "sleep",
            "params": [
                {
                    "name": "ms",
                    "description": "time in milliseconds",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 318,
            "description": "Returns a Promise that will be fulfilled when the next frame is rendered",
            "itemtype": "method",
            "name": "nextFrame",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 332,
            "description": "Is a wrapper for callbacks that throws an LS \"exception\" in case something goes wrong (needed to catch the error from the system and editor)",
            "itemtype": "method",
            "name": "safeCall",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "instance",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 361,
            "description": "Is a wrapper for setTimeout that throws an LS \"code_error\" in case something goes wrong (needed to catch the error from the system)",
            "itemtype": "method",
            "name": "setTimeout",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "time",
                    "description": "in ms",
                    "type": "Number"
                },
                {
                    "name": "timer_id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 383,
            "description": "Is a wrapper for setInterval that throws an LS \"code_error\" in case something goes wrong (needed to catch the error from the system)",
            "itemtype": "method",
            "name": "setInterval",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "time",
                    "description": "in ms",
                    "type": "Number"
                },
                {
                    "name": "timer_id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 405,
            "description": "copy the properties (methods and properties) of origin class into target class",
            "itemtype": "method",
            "name": "extendClass",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "origin",
                    "description": "",
                    "type": "Class"
                }
            ],
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 440,
            "description": "Clones an object (no matter where the object came from)\n- It skip attributes starting with \"_\" or \"jQuery\" or functions\n- it tryes to see which is the best copy to perform\n- to the rest it applies JSON.parse( JSON.stringify ( obj ) )\n- use it carefully",
            "itemtype": "method",
            "name": "cloneObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object to clone",
                    "type": "Object"
                },
                {
                    "name": "target=null",
                    "description": "optional, the destination object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the cloned object (target if it is specified)",
                "type": "Object"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 639,
            "description": "Clears all the uids inside this object and children (it also works with serialized object)",
            "itemtype": "method",
            "name": "clearUIds",
            "params": [
                {
                    "name": "root",
                    "description": "could be a node or an object from a node serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 700,
            "description": "Returns an object class name (uses the constructor toString)",
            "itemtype": "method",
            "name": "getObjectClassName",
            "params": [
                {
                    "name": "the",
                    "description": "object to see the class name",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the string with the name",
                "type": "String"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 725,
            "description": "Returns an string with the class name",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "class",
                    "description": "object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the string with the name",
                "type": "String"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 750,
            "description": "Returns the public properties of one object and the type (not the values)",
            "itemtype": "method",
            "name": "getObjectProperties",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns object with attribute name and its type",
                "type": "Object"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 824,
            "description": "Contains all the registered material classes",
            "itemtype": "property",
            "name": "MaterialClasses",
            "type": "{Object}",
            "default": "{}",
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 833,
            "description": "Register a Material class so it is listed when searching for new materials to attach",
            "itemtype": "method",
            "name": "registerMaterialClass",
            "params": [
                {
                    "name": "comp",
                    "description": "component class to register",
                    "type": "ComponentClass"
                }
            ],
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 856,
            "description": "Returns an script context using the script name (not the node name), usefull to pass data between scripts.",
            "itemtype": "method",
            "name": "getScript",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the script according to the Script component.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the context of the script.",
                "type": "Object"
            },
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 892,
            "description": "clears the global scene and the resources manager",
            "itemtype": "method",
            "name": "reset",
            "class": "LS.LS",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 1026,
            "description": "Assigns a value to a property of one node in the scene, just by using a string identifier\nExample:  LSQ.set(\"mynode|a_child/MeshRenderer/enabled\",false);",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "locator",
                    "description": "the locator string identifying the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value to assign to property",
                    "type": "*"
                }
            ],
            "class": "LSQ",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 1054,
            "description": "Retrieves the value of a property of one node in the scene, just by using a string identifier\nExample: var value = LSQ.get(\"mynode|a_child/MeshRenderer/enabled\");",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "locator",
                    "description": "the locator string identifying the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of the property",
                "type": "*"
            },
            "class": "LSQ",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 1086,
            "description": "Shortens a locator that uses unique identifiers to a simpler one, but be careful, because it uses names instead of UIDs it could point to the wrong property\nExample: \"@NODE--a40661-1e8a33-1f05e42-56/@COMP--a40661-1e8a34-1209e28-57/size\" -> \"node|child/Collider/size\"",
            "itemtype": "method",
            "name": "shortify",
            "params": [
                {
                    "name": "locator",
                    "description": "the locator string to shortify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the locator using names instead of UIDs",
                "type": "String"
            },
            "class": "LSQ",
            "module": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 1125,
            "description": "Assigns a value using the getLocatorInfo object instead of searching it again\nThis is faster but if the locator points to a different object it wont work.",
            "itemtype": "method",
            "name": "setFromInfo",
            "params": [
                {
                    "name": "info",
                    "description": "information of a location (obtain using scene.getLocatorInfo",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "to assign",
                    "type": "*"
                }
            ],
            "class": "LSQ",
            "module": "LS"
        },
        {
            "file": "../src/formats.js",
            "line": 16,
            "description": "Tells the system info about this file format\nInfo should contain fields like type:\"image\", resource: \"Mesh|Texture\", format: \"text|binary\", parse: function, native: true|false",
            "itemtype": "method",
            "name": "addFormat",
            "class": "LS.Formats",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/formats.js",
            "line": 36,
            "description": "Parse some data and returns the resulting resource",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "could be a string, binary, arraybuffer, xml...",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "how the file should be parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the final resource, could be a Texture, a Mesh, or an object",
                "type": "*"
            },
            "class": "LS.Formats",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 41,
            "description": "Returns the DOM element responsible for the HTML GUI of the app. This is helpful because this GUI will be automatically removed if the app finishes.\nAny HTML must be attached to this element, otherwise it may have problems with the editor.",
            "itemtype": "method",
            "name": "getHTMLRoot",
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 91,
            "description": "Creates a HTMLElement of the tag_type and adds it to the DOM on top of the canvas",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "tag_type",
                    "description": "the tag type \"div\"",
                    "type": "String"
                },
                {
                    "name": "anchor",
                    "description": "\"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\" or \"none\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 108,
            "description": "attach HTMLElement to HTML GUI Root in the anchor position specified",
            "itemtype": "method",
            "name": "attach",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "anchor",
                    "description": "\"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\" or \"none\"",
                    "type": "String"
                }
            ],
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 169,
            "description": "Removes an element from the GUI (same as  element.parentNode.removeChild( element ); )",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "element",
                    "description": "HTML element to detach from the GUI",
                    "type": "HTMLElement"
                }
            ],
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 181,
            "description": "Removes all the GUI elements from the DOM",
            "itemtype": "method",
            "name": "reset",
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 203,
            "description": "shows the HTML GUI",
            "itemtype": "method",
            "name": "showHTML",
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 216,
            "description": "hides the HTML GUI (but it is still existing)",
            "itemtype": "method",
            "name": "hideHTML",
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 228,
            "description": "Loads resource containing the HTML code for the GUI and attachs it inside a div to the hud",
            "itemtype": "method",
            "name": "loadHTML",
            "params": [
                {
                    "name": "url",
                    "description": "the url of the resource containing all the HTML code",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "callback that will be called once the HTML has been loaded and attached to the doom, it receives the HTMLElement containing all the HTML",
                    "type": "Function"
                }
            ],
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 285,
            "description": "Called by the LS.Renderer to clear intermediate stuff",
            "itemtype": "method",
            "name": "ResetImmediateGUI",
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 343,
            "description": "Renders an immediate gui BOX, used as background",
            "itemtype": "method",
            "name": "Box",
            "params": [
                {
                    "name": "area",
                    "description": "[x,y,width,height]",
                    "type": "Array"
                },
                {
                    "name": "color",
                    "description": "a color in string format \"#AFAFAF\"",
                    "type": "String"
                }
            ],
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 361,
            "description": "Renders a text (or a texture)",
            "itemtype": "method",
            "name": "Label",
            "params": [
                {
                    "name": "area",
                    "description": "[x,y,width,height]",
                    "type": "Array"
                },
                {
                    "name": "content",
                    "description": "could be a string or a GL.Texture",
                    "type": "String|GL.Texture"
                }
            ],
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 402,
            "description": "Renders a Button and returns if the button was pressed",
            "itemtype": "method",
            "name": "Button",
            "params": [
                {
                    "name": "area",
                    "description": "[x,y,width,height]",
                    "type": "Array"
                },
                {
                    "name": "content",
                    "description": "could be a string or a GL.Texture (if null the button will be invisible)",
                    "type": "String|GL.Texture"
                },
                {
                    "name": "content_over",
                    "description": "same as before but in case the mouse is over",
                    "type": "String|GL.Texture"
                }
            ],
            "return": {
                "description": "true if the button was pressed",
                "type": "Boolean"
            },
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 461,
            "description": "Renders a Toolbar (list of buttons) and returns the active one",
            "itemtype": "method",
            "name": "Toolbar",
            "params": [
                {
                    "name": "area",
                    "description": "[x,y,width,height]",
                    "type": "Array"
                },
                {
                    "name": "selected",
                    "description": "the index of the selected option",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "an array containing either strings or GL.Texture",
                    "type": "Array[String|GL.Texture]"
                }
            ],
            "return": {
                "description": "the selected index",
                "type": "Number"
            },
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 542,
            "description": "Renders a checkbox widget, and returns the current state\nRemember: you must pass as value the same value returned by this function in order to work propertly",
            "itemtype": "method",
            "name": "Toggle",
            "params": [
                {
                    "name": "area",
                    "description": "[x,y,width,height]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "if the checkbox is on or off",
                    "type": "Boolean"
                },
                {
                    "name": "content",
                    "description": "an string or image in case the checkbox is on",
                    "type": "String|GL.Texture"
                },
                {
                    "name": "content_off",
                    "description": "an string or image in case the checkbox is off",
                    "type": "String|GL.Texture"
                }
            ],
            "return": {
                "description": "the current state of the checkbox (will be different from value if it was pressed)",
                "type": "Boolean"
            },
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 607,
            "description": "Renders a textfield widget and returns the current text value\nRemember: you must pass as text the same text returned by this function in order to work propertly",
            "itemtype": "method",
            "name": "TextField",
            "params": [
                {
                    "name": "area",
                    "description": "[x,y,width,height]",
                    "type": "Array"
                },
                {
                    "name": "text",
                    "description": "the text to show in the textfield",
                    "type": "String"
                },
                {
                    "name": "max_length",
                    "description": "to limit the text, otherwise leave blank",
                    "type": "Number"
                },
                {
                    "name": "is_password",
                    "description": "set to true to show as password",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the current state of the checkbox (will be different from value if it was pressed)",
                "type": "Boolean"
            },
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 707,
            "description": "Renders an horizontal slider widget, returns the current value\nRemember: you must pass as value the same value returned by this function in order to work propertly",
            "itemtype": "method",
            "name": "HorizontalSlider",
            "params": [
                {
                    "name": "area",
                    "description": "[x,y,width,height]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "the value to show in the slider",
                    "type": "Number"
                },
                {
                    "name": "left_value",
                    "description": "the minimum value for the slider",
                    "type": "Number"
                },
                {
                    "name": "right_value",
                    "description": "the maximum value for the slider",
                    "type": "Number"
                },
                {
                    "name": "show_value",
                    "description": "if you want to see a caption in text format with the value",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the current value of the slider (will be different from value if it was clicked)",
                "type": "Number"
            },
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 779,
            "description": "Renders an vertical slider widget, returns the current value\nRemember: you must pass as value the same value returned by this function in order to work propertly",
            "itemtype": "method",
            "name": "VerticalSlider",
            "params": [
                {
                    "name": "area",
                    "description": "[x,y,width,height]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "the value to show in the slider",
                    "type": "Number"
                },
                {
                    "name": "bottom_value",
                    "description": "the minimum value for the slider",
                    "type": "Number"
                },
                {
                    "name": "top_value",
                    "description": "the maximum value for the slider",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the current value of the slider (will be different from value if it was clicked)",
                "type": "Number"
            },
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/gui.js",
            "line": 844,
            "description": "Renders an knob slider widget, returns the current value\nRemember: you must pass as value the same value returned by this function in order to work propertly",
            "itemtype": "method",
            "name": "Knob",
            "params": [
                {
                    "name": "area",
                    "description": "[x,y,width,height]",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "the value to show in the slider",
                    "type": "Number"
                },
                {
                    "name": "bottom_value",
                    "description": "the minimum value for the slider",
                    "type": "Number"
                },
                {
                    "name": "top_value",
                    "description": "the maximum value for the slider",
                    "type": "Number"
                },
                {
                    "name": "steps",
                    "description": "[optional] the numeber of steps (if 0 then infinite)",
                    "type": "Number"
                },
                {
                    "name": "content",
                    "description": "[optional] a texture or image to use as the knob",
                    "type": "Image|GL.Texture"
                }
            ],
            "return": {
                "description": "the current value of the slider (will be different from value if it was clicked)",
                "type": "Number"
            },
            "class": "LS.GUI",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/input.js",
            "line": 118,
            "description": "returns if the mouse is inside the rect defined by x,y, width,height",
            "itemtype": "method",
            "name": "isMouseInRect",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate of the mouse in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y coordinate of the mouse in canvas coordinates (0 is bottom)",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "rectangle width in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "rectangle height in pixels",
                    "type": "Number"
                },
                {
                    "name": "flip",
                    "description": "[optional] if you want to flip the y coordinate",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.Input",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/input.js",
            "line": 146,
            "description": "Returns a gamepad snapshot if it is connected",
            "itemtype": "method",
            "name": "getGamepad",
            "params": [
                {
                    "name": "index",
                    "description": "the index of the gamepad",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "gamepad snapshot with all the info",
                "type": "Object"
            },
            "class": "LS.Input",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/input.js",
            "line": 159,
            "description": "Returns a gamepad snapshot if it is connected",
            "itemtype": "method",
            "name": "getGamepadAxis",
            "params": [
                {
                    "name": "index",
                    "description": "the index of the gamepad",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "the name of the axis (also you could specify the number)",
                    "type": "String"
                },
                {
                    "name": "raw",
                    "description": "[optional] if you want the data unfiltered",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "axis value from -1 to 1",
                "type": "Number"
            },
            "class": "LS.Input",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/input.js",
            "line": 187,
            "description": "Returns if the given button of the specified gamepad is pressed",
            "itemtype": "method",
            "name": "isGamepadButtonPressed",
            "params": [
                {
                    "name": "index",
                    "description": "the index of the gamepad",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "the name of the button \"A\",\"B\",\"X\",\"Y\",\"LB\",\"RB\",\"BACK\",\"START\",\"LS\",\"RS\" (also you could specify the number)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "if the button is pressed",
                "type": "Boolean"
            },
            "class": "LS.Input",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/input.js",
            "line": 212,
            "description": "Returns if the given mouse button is pressed",
            "itemtype": "method",
            "name": "isMouseButtonPressed",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the button  \"LEFT\",\"MIDDLE,\"RIGHT\" (also you could specify the number)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "if the button is pressed",
                "type": "Boolean"
            },
            "class": "LS.Input",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/input.js",
            "line": 231,
            "description": "Returns a Promise that will be fulfilled when the user clicks the screen",
            "itemtype": "method",
            "name": "mouseClick",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "LS.Input",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 8,
            "description": "A front-end for XMLHttpRequest so it is simpler and more cross-platform",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "request",
                    "description": "object with the fields for the request: \n\t\t\tdataType: result type {text,xml,json,binary,arraybuffer,image},\n\t\t\t\tdata: object with form fields,\n\t\t\t\tmethod: \"POST\",\"GET\",\"DELETE\",\"PUT\", if omited if will use post or get depending on the parameters,\n\t\t\t\tmimeType: to overwrite,\n\t\t\t\tuse_proxy: if true it will use LiteScene proxy if available\n\t\t\t\tcallbacks supported: {success, error, progress}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the XMLHttpRequest of the petition",
                "type": "XMLHttpRequest"
            },
            "class": "LS.Collision",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 163,
            "description": "retrieve a text file from url (you can bind LEvents to done and fail)",
            "itemtype": "method",
            "name": "requestText",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "form params",
                    "type": "Object"
                },
                {
                    "name": "callback(",
                    "description": "data )",
                    "type": "Function"
                }
            ],
            "class": "LS.Collision",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 181,
            "description": "retrieve a JSON file from url (you can bind LEvents to done and fail)",
            "itemtype": "method",
            "name": "requestJSON",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "form params",
                    "type": "Object"
                },
                {
                    "name": "callback(",
                    "description": "json )",
                    "type": "Function"
                }
            ],
            "class": "LS.Collision",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 199,
            "description": "retrieve a file from url (you can bind LEvents to done and fail)",
            "itemtype": "method",
            "name": "requestFile",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "form params",
                    "type": "Object"
                },
                {
                    "name": "callback(",
                    "description": "file )",
                    "type": "Function"
                }
            ],
            "class": "LS.Collision",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 217,
            "description": "Request script and inserts it in the DOM",
            "itemtype": "method",
            "name": "requestScript",
            "params": [
                {
                    "name": "url",
                    "description": "could be an array with urls to load in order",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "on_error",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "on_progress",
                    "description": "(if several files are required, on_progress is called after every file is added to the DOM)",
                    "type": "Function"
                }
            ],
            "class": "LS.Collision",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 72,
            "description": "Computes the instance bounding box in world space from the one in local space",
            "itemtype": "method",
            "name": "updateAABB",
            "class": "LS.PhysicsInstance",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 103,
            "description": "Cast a ray that traverses the scene checking for collisions with Colliders",
            "itemtype": "method",
            "name": "raycast",
            "params": [
                {
                    "name": "origin",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "options",
                    "description": "( max_dist maxium distance, layers which layers to check, scene, first_collision )",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array of Collision objects containing all the nodes that collided with the ray or null in the form [SceneNode, Collider, collision point, distance]",
                "type": "Array"
            },
            "class": "LS.Physics",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 205,
            "description": "Test if a sphere collides with any of the colliders in the scene",
            "itemtype": "method",
            "name": "testSphere",
            "params": [
                {
                    "name": "origin",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Radius"
                },
                {
                    "name": "options",
                    "description": "layers, colliders, scene",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the first PhysicsObject that collided with, otherwise null",
                "type": "PhysicsInstance"
            },
            "class": "LS.Physics",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 338,
            "description": "Cast a ray that traverses the scene checking for collisions with RenderInstances instead of colliders\nSimilar to Physics.raycast but using the RenderInstances (if options.triangle_collision it builds Octrees for the RIs whose OOBB collides with the ray)",
            "itemtype": "method",
            "name": "raycastRenderInstances",
            "params": [
                {
                    "name": "origin",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "options",
                    "description": "{ instances: array of instances, if not the scene will be used, triangle_collision: true if you want to test against triangles, max_distance: maxium ray distance, layers, scene, max_distance, first_collision : returns the first collision (which could be not the closest one) }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "array containing all the RenderInstances that collided with the ray in the form [SceneNode, RenderInstance, collision point, distance]",
                "type": "Array"
            },
            "class": "LS.Physics",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 431,
            "description": "Cast a ray that traverses the scene checking for collisions with RenderInstances instead of colliders\nSimilar to Physics.raycast but using the RenderInstances (if options.triangle_collision it builds Octrees for the RIs whose OOBB collides with the ray)",
            "itemtype": "method",
            "name": "raycastRenderInstances",
            "params": [
                {
                    "name": "origin",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "node",
                    "description": "",
                    "type": "LS.SceneNode"
                },
                {
                    "name": "options",
                    "description": "( triangle_collision: true if you want to test against triangles, max_distance: maxium ray distance, layers, scene, max_distance, first_collision : returns the first collision (which could be not the closest one) )",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "array containing all the RenderInstances that collided with the ray in the form [SceneNode, RenderInstance, collision point, distance]",
                "type": "Array"
            },
            "class": "LS.Physics",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/picking.js",
            "line": 13,
            "description": "Renders the pixel and retrieves the color to detect which object it was, slow but accurate",
            "itemtype": "method",
            "name": "getNodeAtCanvasPosition",
            "params": [
                {
                    "name": "x",
                    "description": "in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "camera",
                    "description": "default is all cameras",
                    "type": "Camera"
                },
                {
                    "name": "layers",
                    "description": "default is 0xFFFF which is all",
                    "type": "Number"
                },
                {
                    "name": "scene",
                    "description": "default is GlobalScene",
                    "type": "SceneTree"
                }
            ],
            "class": "LS.Picking",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/picking.js",
            "line": 40,
            "description": "Returns the instance under a screen position",
            "itemtype": "method",
            "name": "getInstanceAtCanvasPosition",
            "params": [
                {
                    "name": "x",
                    "description": "in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "layers",
                    "description": "default is 0xFFFF which is all",
                    "type": "Number"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                }
            ],
            "return": {
                "description": "the info supplied by the picker (usually a SceneNode)",
                "type": "Object"
            },
            "class": "LS.Picking",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/picking.js",
            "line": 73,
            "description": "Returns a color you should use to paint this node during picking rendering\nyou tell what info you want to retrieve associated with this object if it is clicked",
            "itemtype": "method",
            "name": "getNextPickingColor",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "array containing all the RenderInstances that collided with the ray",
                "type": "Vec3"
            },
            "class": "LS.Picking",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 133,
            "description": "Loads a config file for the player, it could also load an scene if the config specifies one",
            "itemtype": "method",
            "name": "loadConfig",
            "params": [
                {
                    "name": "url",
                    "description": "url to the JSON file containing the config",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "callback trigged when the config is loaded",
                    "type": "Function"
                },
                {
                    "name": "on_scene_loaded",
                    "description": "callback trigged when the scene and the resources are loaded (in case the config contains a scene to load)",
                    "type": "Function"
                }
            ],
            "class": "LS.Player",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 205,
            "description": "Loads an scene and triggers start",
            "itemtype": "method",
            "name": "loadScene",
            "params": [
                {
                    "name": "url",
                    "description": "url to the JSON file containing all the scene info",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "callback trigged when the scene and the resources are loaded",
                    "type": "Function"
                }
            ],
            "class": "LS.Player",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 245,
            "description": "loads Scene from object or JSON taking into account external and global scripts",
            "itemtype": "method",
            "name": "setScene",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "on_complete",
                    "description": "callback trigged when the scene and the resources are loaded",
                    "type": "Function"
                }
            ],
            "class": "LS.Player",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 301,
            "description": "Pauses the execution. This will launch a \"paused\" event and stop calling the update method",
            "itemtype": "method",
            "name": "pause",
            "class": "LS.Player",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 310,
            "description": "Starts the scene. This will launch a \"start\" event and start calling the update for every frame",
            "itemtype": "method",
            "name": "play",
            "class": "LS.Player",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 326,
            "description": "Stops the scene. This will launch a \"finish\" event and stop calling the update",
            "itemtype": "method",
            "name": "stop",
            "class": "LS.Player",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 337,
            "description": "Clears the current scene",
            "itemtype": "method",
            "name": "clear",
            "class": "LS.Player",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 348,
            "description": "Enable the functionality to catch files droped in the canvas so script can catch the \"fileDrop\" event (onFileDrop in the Script components).",
            "itemtype": "method",
            "name": "setFileDrop",
            "params": [
                {
                    "name": "v",
                    "description": "true if you want to allow file drop (true by default)",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Player",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 599,
            "description": "Enable a debug renderer that shows gizmos for most of the things on the scene",
            "itemtype": "method",
            "name": "setDebugRender",
            "params": [
                {
                    "name": "v",
                    "description": "true if you want the debug render",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Player",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 59,
            "description": "Returns a string to append to any url that should use the browser cache (when updating server info)",
            "itemtype": "method",
            "name": "getNoCache",
            "params": [
                {
                    "name": "force",
                    "description": "force to return a nocache string ignoring the default configuration",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "a string to attach to a url so the file wont be cached",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 69,
            "description": "Resets all the resources cached, so it frees the memory",
            "itemtype": "method",
            "name": "reset",
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 85,
            "description": "Resources need to be parsed once the data has been received, some formats could be parsed using native functions (like images) others \nrequire to pass the data through a series of functions (extract raw content, parse it, upload it to the GPU...\nRegistering a resource preprocessor the data will be converted once it is in memory",
            "itemtype": "method",
            "name": "registerResourcePreProcessor",
            "params": [
                {
                    "name": "fileformats",
                    "description": "the extension of the formats that this function will parse",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the function to call once the data must be processed, if the process is async it must return true",
                    "type": "Function"
                },
                {
                    "name": "data_type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "resource_type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 109,
            "description": "Some resources require to be post-processed right after being parsed to validate, extend, register (meshes need to have the AABB computed...)\nThis job could be done inside the parser but it is better to do it separatedly so it can be reused among different parsers.",
            "itemtype": "method",
            "name": "registerResourcePostProcessor",
            "params": [
                {
                    "name": "resource_type",
                    "description": "the name of the class of the resource",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the function to call once the data has been processed",
                    "type": "Function"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 122,
            "description": "Returns the filename extension from an url",
            "itemtype": "method",
            "name": "getExtension",
            "params": [
                {
                    "name": "fullpath",
                    "description": "url or filename",
                    "type": "String"
                },
                {
                    "name": "complex_extension",
                    "description": "[optional] returns the extension from the first dot, otherwise only the part from last dot",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 144,
            "description": "Returns the url without the extension",
            "itemtype": "method",
            "name": "removeExtension",
            "params": [
                {
                    "name": "fullpath",
                    "description": "url or filename",
                    "type": "String"
                },
                {
                    "name": "complex_extension",
                    "description": "[optional] removes the extension from the first dot, otherwise only the part from last dot",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "url without extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 165,
            "description": "Returns the filename from a full path",
            "itemtype": "method",
            "name": "getFilename",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 183,
            "description": "Returns the folder from a fullpath",
            "itemtype": "method",
            "name": "getFolder",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "folder name",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 198,
            "description": "Returns the filename without the folder or the extension",
            "itemtype": "method",
            "name": "getBasename",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 217,
            "description": "Returns the url protocol (http, https) or empty string if no protocol was found",
            "itemtype": "method",
            "name": "getProtocol",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "protocol",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 236,
            "description": "Cleans resource name (removing double slashes to avoid problems) \nIt is slow, so use it only in changes, not in getters",
            "itemtype": "method",
            "name": "cleanFullpath",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "fullpath cleaned",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 262,
            "description": "Loads all the resources in the Object (it uses an object to store not only the filename but also the type)",
            "itemtype": "method",
            "name": "loadResources",
            "params": [
                {
                    "name": "resources",
                    "description": "contains all the resources, associated with its type",
                    "type": "Object|Array"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resources",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "the actual amount of resources being loaded (this differs fromt he resources passed because some could be already in memory)",
                "type": "Number"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 300,
            "description": "Set the base path where all the resources will be fetched (unless they have absolute URL)\nBy default it will use the website home address",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 312,
            "description": "Set a proxy url where all non-local resources will be requested, allows to fetch assets to other servers.\nrequest will be in this form: proxy_url + \"/\" + url_with_protocol: ->   http://myproxy.com/google.com/images/...",
            "itemtype": "method",
            "name": "setProxy",
            "params": [
                {
                    "name": "proxy_url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 333,
            "description": "transform a url to a full url taking into account proxy, virtual file systems and external_repository\nused only when requesting a resource to be loaded",
            "itemtype": "method",
            "name": "getFullURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "full url",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 395,
            "description": "Allows to associate a resource path like \"vfs:myfile.png\" to an url according to the value before the \":\".\nThis way we can have alias for different folders where the assets are stored.\nP.e:   \"e\",\"http://domain.com\"  -> will transform \"e:myfile.png\" in \"http://domain.com/myfile.png\"",
            "itemtype": "method",
            "name": "registerFileSystem",
            "params": [
                {
                    "name": "name",
                    "description": "the filesystem name (the string before the colons in the path)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the url to attach before",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 409,
            "description": "Returns the resource if it has been loaded, if you want to force to load it, use load",
            "itemtype": "method",
            "name": "getResource",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "constructor",
                    "description": "[optional] allows to specify the class expected for this resource, if the resource doesnt match, it returns null",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the resource",
                "type": "*"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 431,
            "description": "Returns the resource type (\"Mesh\",\"Texture\",\"Material\",\"SceneNode\",...) of a given resource",
            "itemtype": "method",
            "name": "getResourceType",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the type in string format",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 449,
            "description": "Returns an object containig all the resources and its data (used to export resources)",
            "itemtype": "method",
            "name": "getResourcesData",
            "params": [
                {
                    "name": "resource_names",
                    "description": "an array containing the resources names",
                    "type": "Array"
                },
                {
                    "name": "allow_files",
                    "description": "[optional] used to allow to retrieve the data in File or Blob, otherwise only String and ArrayBuffer is supported",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "object with name:data",
                "type": "Object"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 499,
            "description": "Marks the resource as modified, used in editor to know when a resource data should be updated",
            "itemtype": "method",
            "name": "resourceModified",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 548,
            "description": "Unmarks the resource as modified",
            "itemtype": "method",
            "name": "resourceSaved",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 563,
            "description": "Loads a generic resource, the type will be infered from the extension, if it is json or wbin it will be processed\nDo not use to load regular files (txts, csv, etc), instead use the LS.Network methods",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resource when processing it { force: to force a reload }",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "on_complete",
                    "description": "callback when the resource is loaded and cached, params: callback( resource, url  ) //( url, resource, options )",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "force_load",
                    "description": "if true it will load the resource, even if it already exists",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "on_error",
                    "description": "callback in case the file wasnt found",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 681,
            "description": "Takes some resource data and transforms it to a resource (and Object ready to be used by the engine) and REGISTERs it in the ResourcesManager.\nIn most cases the process involves parsing and uploading to the GPU\nIt is called for every single resource that comes from an external source (URL) right after being loaded",
            "itemtype": "method",
            "name": "processResource",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "the data of the resource (could be string, arraybuffer, image... )",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resource",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "on_complete",
                    "description": "once the resource is ready",
                    "type": "Function"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 833,
            "description": "Takes a resource instance, and adds some extra properties and register it",
            "itemtype": "method",
            "name": "processFinalResource",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "the",
                    "description": "resource class",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resource",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "on_complete",
                    "description": "once the resource is ready",
                    "type": "Function"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 885,
            "description": "Stores the resource inside the manager containers. This way it will be retrieveble by anybody who needs it.",
            "itemtype": "method",
            "name": "registerResource",
            "params": [
                {
                    "name": "filename",
                    "description": "fullpath",
                    "type": "String"
                },
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 938,
            "description": "removes the resources from all the containers",
            "itemtype": "method",
            "name": "unregisterResource",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true is removed, false if not found",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 970,
            "description": "Used to load files and get them as File (or Blob)",
            "itemtype": "method",
            "name": "getURLasFile",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the file",
                "type": "File"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 989,
            "description": "Changes the name of a resource and sends an event to all components to change it accordingly",
            "itemtype": "method",
            "name": "renameResource",
            "params": [
                {
                    "name": "old_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "new_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "skip_event",
                    "description": "ignore sending an event to all components to rename the resource",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "if the file was found",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 1047,
            "description": "Tells if it is loading resources (or an specific resource)",
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 1062,
            "description": "forces to try to reload again resources not found",
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 1079,
            "description": "returns a mesh resource if it is loaded",
            "itemtype": "method",
            "name": "getMesh",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mesh"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 1096,
            "description": "returns a texture resource if it is loaded",
            "itemtype": "method",
            "name": "getTexture",
            "params": [
                {
                    "name": "filename",
                    "description": "could be a texture itself in which case returns the same texture",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 1122,
            "description": "Binds a callback for when a resource is loaded (in case you need to do something special)",
            "itemtype": "method",
            "name": "onceLoaded",
            "params": [
                {
                    "name": "fullpath",
                    "description": "of the resource you want to get the notification once is loaded",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the function to call, it will be called as callback( fullpath, resource )",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "(number) index of the position in the array, use this index to cancel the event"
            },
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 1147,
            "description": "Cancels the binding of a onceLoaded",
            "itemtype": "method",
            "name": "cancelOnceLoaded",
            "params": [
                {
                    "name": "fullpath",
                    "description": "fullpath of the resource you want to cancel the binding",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "the index of the callback to cancel (as it was returned by onceLoaded)",
                    "type": "Number"
                }
            ],
            "class": "LS.ResourcesManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 114,
            "description": "This initializes the content of the scene.\nCall it to clear the scene content",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "Returns true on success",
                "type": "Boolean"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 170,
            "description": "Clears the scene using the init function\nand trigger a \"clear\" LEvent",
            "itemtype": "method",
            "name": "clear",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 187,
            "description": "Fired when the whole scene is cleared",
            "itemtype": "event",
            "name": "clear",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 196,
            "description": "Configure the Scene using an object (the object can be obtained from the function serialize)\nInserts the nodes, configure them, and change the parameters\nATTENTION: Destroys all previously existing info",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "scene_info",
                    "description": "the object containing all the info about the nodes and config of the scene",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 257,
            "description": "Fired after the scene has been configured",
            "itemtype": "event",
            "name": "configure",
            "params": [
                {
                    "name": "scene_info",
                    "description": "contains all the info to do the configuration",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 264,
            "description": "Fired when something changes in the scene",
            "itemtype": "event",
            "name": "change",
            "params": [
                {
                    "name": "scene_info",
                    "description": "contains all the info to do the configuration",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 272,
            "description": "Creates and object containing all the info about the scene and nodes.\nThe oposite of configure.\nIt calls the serialize method in every node",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "return a JS Object with all the scene info",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 309,
            "description": "Fired after the scene has been serialized to an object",
            "itemtype": "event",
            "name": "serialize",
            "params": [
                {
                    "name": "object",
                    "description": "to store the persistent info",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 320,
            "description": "Assigns a scene from a JSON description (or WBIN,ZIP)",
            "itemtype": "method",
            "name": "setFromJSON",
            "params": [
                {
                    "name": "data",
                    "description": "JSON object containing the scene",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "the callback to call when the scene is ready",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_error",
                    "description": "the callback to call if there is a  loading error",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_progress",
                    "description": "it is called while loading the scene info (not the associated resources)",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_resources_loaded",
                    "description": "it is called when all the resources had been loaded",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_scripts_loaded",
                    "description": "the callback to call when the loading is complete but before assigning the scene",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 369,
            "description": "Fired when the scene has been loaded but before the resources",
            "itemtype": "event",
            "name": "load",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 386,
            "description": "Fired after all resources have been loaded",
            "itemtype": "event",
            "name": "loadCompleted",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 402,
            "description": "Loads a scene from a relative url pointing to a JSON description (or WBIN,ZIP)\nWarning: this url is not passed through the LS.ResourcesManager so the url is absolute",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "where the JSON object containing the scene is stored",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "the callback to call when the loading is complete",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_error",
                    "description": "the callback to call if there is a  loading error",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_progress",
                    "description": "it is called while loading the scene info (not the associated resources)",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_resources_loaded",
                    "description": "it is called when all the resources had been loaded",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 434,
            "description": "Fired before loading scene",
            "itemtype": "event",
            "name": "beforeLoad",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 524,
            "description": "Loads a scene from a relative url pointing to a JSON description (or WBIN,ZIP)\nIt uses the resources folder as the root folder (in comparison with the regular load function)",
            "itemtype": "method",
            "name": "loadFromResources",
            "params": [
                {
                    "name": "url",
                    "description": "where the JSON object containing the scene is stored",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "the callback to call when the loading is complete",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_error",
                    "description": "the callback to call if there is a  loading error",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_progress",
                    "description": "it is called while loading the scene info (not the associated resources)",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_resources_loaded",
                    "description": "it is called when all the resources had been loaded",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 543,
            "description": "Static method, returns a list of all the scripts that must be loaded, in order and with the full path",
            "itemtype": "method",
            "name": "SceneTree.getScriptsList",
            "params": [
                {
                    "name": "scene",
                    "description": "the object containing info about the scripts (could be a scene or a JSON object)",
                    "type": "SceneTree|Object"
                },
                {
                    "name": "allow_local",
                    "description": "if we allow local resources",
                    "type": "Boolean"
                },
                {
                    "name": "full_paths",
                    "description": "if true it will return the full path to every resource",
                    "type": "Boolean"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 718,
            "description": "Returns an array with all the cameras enabled in the scene",
            "itemtype": "method",
            "name": "getActiveCameras",
            "params": [
                {
                    "name": "force",
                    "description": "[optional] if you want to collect the cameras again, otherwise it returns the last ones collected",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "cameras",
                "type": "Array"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 732,
            "description": "Returns an array with all the cameras in the scene (even if they are disabled)",
            "itemtype": "method",
            "name": "getAllCameras",
            "return": {
                "description": "cameras",
                "type": "Array"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 756,
            "description": "Returns an array with all the lights enabled in the scene",
            "itemtype": "method",
            "name": "getActiveLights",
            "params": [
                {
                    "name": "force",
                    "description": "[optional] if you want to collect the lights again, otherwise it returns the last ones collected",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "lights",
                "type": "Array"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 806,
            "description": "Fired when a new node is added to this scene",
            "itemtype": "event",
            "name": "nodeAdded",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "LS.SceneNode"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 833,
            "description": "Fired after a node has been removed",
            "itemtype": "event",
            "name": "nodeRemoved",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "LS.SceneNode"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 844,
            "description": "all nodes are stored in an array, this function recomputes the array so they are in the right order in case one has changed order",
            "itemtype": "method",
            "name": "recomputeNodesArray",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 878,
            "description": "Returns the array containing all the nodes in the scene",
            "itemtype": "method",
            "name": "getNodes",
            "params": [
                {
                    "name": "recompute",
                    "description": "[optional] in case you want to rearrange the nodes",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "array containing every SceneNode in the scene",
                "type": "Array"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 892,
            "description": "retrieves a Node based on the name, path ( name|childname|etc ) or uid",
            "itemtype": "method",
            "name": "getNode",
            "params": [
                {
                    "name": "name",
                    "description": "node name to search",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 921,
            "description": "retrieves a Node that matches that name. It is fast because they are stored in an object.\nIf more than one object has the same name, the first one added to the tree is returned",
            "itemtype": "method",
            "name": "getNodeByName",
            "params": [
                {
                    "name": "name",
                    "description": "name of the node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 934,
            "description": "retrieves a Node based on a given uid. It is fast because they are stored in an object",
            "itemtype": "method",
            "name": "getNodeByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "uid of the node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 946,
            "description": "retrieves a Node by its index",
            "itemtype": "method",
            "name": "getNodeByIndex",
            "params": [
                {
                    "name": "node",
                    "description": "index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returns the node at the 'index' position in the nodes array",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 961,
            "description": "retrieves a node array filtered by the filter function",
            "itemtype": "method",
            "name": "filterNodes",
            "params": [
                {
                    "name": "filter",
                    "description": "a callback function that receives every node and must return true or false",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "array containing the nodes that passes the filter",
                "type": "Array"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 977,
            "description": "searches the component with this uid, it iterates through all the nodes and components (slow)",
            "itemtype": "method",
            "name": "findComponentByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "uid of the node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "component or null",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 995,
            "description": "searches the material with this uid, it iterates through all the nodes (slow)",
            "itemtype": "method",
            "name": "findMaterialByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "uid of the material",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Material or null",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1018,
            "description": "Returns information of a node component property based on the locator of that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "getPropertyInfo",
            "params": [
                {
                    "name": "locator",
                    "description": "locator of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "object with node, component, name, and value",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1066,
            "description": "Returns information of a node component property based on the locator of that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "getPropertyInfoFromPath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "object with node, component, name, and value",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1091,
            "description": "Assigns a value to the property of a component in a node based on the locator of that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "getPropertyValue",
            "params": [
                {
                    "name": "locator",
                    "description": "locator of the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to assign",
                    "type": "*"
                },
                {
                    "name": "root",
                    "description": "[Optional] if you want to limit the locator to search inside a node",
                    "type": "SceneNode"
                }
            ],
            "return": {
                "description": "the target where the action was performed",
                "type": "Component"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1134,
            "description": "Assigns a value to the property of a component in a node based on the locator of that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "setPropertyValue",
            "params": [
                {
                    "name": "locator",
                    "description": "locator of the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to assign",
                    "type": "*"
                },
                {
                    "name": "root",
                    "description": "[Optional] if you want to limit the locator to search inside a node",
                    "type": "SceneNode"
                }
            ],
            "return": {
                "description": "the target where the action was performed",
                "type": "Component"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1150,
            "description": "Assigns a value to the property of a component in a node based on the locator that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "setPropertyValueFromPath",
            "params": [
                {
                    "name": "path",
                    "description": "a property locator split by \"/\"",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "the value to assign",
                    "type": "*"
                },
                {
                    "name": "root_node",
                    "description": "[optional] the root node where you want to search the locator (this is to limit the locator to a branch of the scene tree)",
                    "type": "SceneNode"
                },
                {
                    "name": "offset",
                    "description": "[optional] used to avoir generating garbage, instead of slicing the array every time, we pass the array index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the target where the action was performed",
                "type": "Component"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1184,
            "description": "Returns the resources used by the scene\nincludes the nodes, components, preloads and global_scripts\ndoesn't include external_scripts",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "[optional] object with resources",
                    "type": "Object"
                },
                {
                    "name": "as_array",
                    "description": "[optional] returns data in array format instead of object format",
                    "type": "Boolean"
                },
                {
                    "name": "skip_in_pack",
                    "description": "[optional] skips resources that come from a pack",
                    "type": "Boolean"
                },
                {
                    "name": "skip_local",
                    "description": "[optional] skips resources whose name starts with \":\" (considered local resources)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the resources in object format (or if as_array is true, then an array)",
                "type": "Object|Array"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1264,
            "description": "Loads all the resources of all the nodes in this scene\nit sends a signal to every node to get all the resources info\nand load them in bulk using the ResourceManager",
            "itemtype": "method",
            "name": "loadResources",
            "params": [
                {
                    "name": "on_complete",
                    "description": "called when the load of all the resources is complete",
                    "type": "Function"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1307,
            "description": "Adds a resource that must be loaded when the scene is loaded",
            "itemtype": "method",
            "name": "addPreloadResource",
            "params": [
                {
                    "name": "fullpath",
                    "description": "the name of the resource",
                    "type": "String"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1318,
            "description": "Remove a resource from the list of resources to preload",
            "itemtype": "method",
            "name": "removePreloadResource",
            "params": [
                {
                    "name": "fullpath",
                    "description": "the name of the resource",
                    "type": "String"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1330,
            "description": "start the scene (triggers an \"start\" event)",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1343,
            "description": "Fired when the nodes need to be initialized",
            "itemtype": "event",
            "name": "init",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1351,
            "description": "Fired when the scene is starting to play",
            "itemtype": "event",
            "name": "start",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1361,
            "description": "pauses the scene (triggers an \"pause\" event)",
            "itemtype": "method",
            "name": "pause",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1372,
            "description": "Fired when the scene pauses (mostly in the editor)",
            "itemtype": "event",
            "name": "pause",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1383,
            "description": "unpauses the scene (triggers an \"unpause\" event)",
            "itemtype": "method",
            "name": "unpause",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1394,
            "description": "Fired when the scene unpauses (mostly in the editor)",
            "itemtype": "event",
            "name": "unpause",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1406,
            "description": "stop the scene (triggers an \"finish\" event)",
            "itemtype": "method",
            "name": "finish",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1418,
            "description": "Fired when the scene stops playing",
            "itemtype": "event",
            "name": "finish",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1430,
            "description": "renders the scene using the assigned renderer",
            "itemtype": "method",
            "name": "render",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1440,
            "description": "This methods crawls the whole tree and collects all the useful info (cameras, lights, render instances, colliders, etc)\nMostly rendering stuff but also some collision info.\nTO DO: refactor this so it doesnt redo the same task in every frame, only if changes are made",
            "itemtype": "method",
            "name": "collectData",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1568,
            "description": "Fired before doing an update",
            "itemtype": "event",
            "name": "beforeUpdate",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1581,
            "description": "Fired while updating",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1590,
            "description": "Fired after updating the scene",
            "itemtype": "event",
            "name": "afterUpdate",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1598,
            "description": "triggers an event to all nodes in the scene\nthis is slow if the scene has too many nodes, thats why we use bindings",
            "itemtype": "method",
            "name": "triggerInNodes",
            "params": [
                {
                    "name": "event_type",
                    "description": "event type name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "data to send associated to the event",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1612,
            "description": "generate a unique node name given a prefix",
            "itemtype": "method",
            "name": "generateUniqueNodeName",
            "params": [
                {
                    "name": "prefix",
                    "description": "the prefix, if not given then \"node\" is used",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a node name that it is not in the scene",
                "type": "String"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1641,
            "description": "Marks that this scene must be rendered again",
            "itemtype": "method",
            "name": "requestFrame",
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1654,
            "description": "returns current scene time (remember that scene time remains freezed if the scene is not playing)",
            "itemtype": "method",
            "name": "getTime",
            "return": {
                "description": "scene time in seconds",
                "type": "Number"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1697,
            "description": "returns an array with the name of all the layers given a layers mask",
            "itemtype": "method",
            "name": "getLayerNames",
            "params": [
                {
                    "name": "layers",
                    "description": "a number with the enabled layers in bit mask format, if ommited all layers are returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "array of strings with the layer names",
                "type": "Array"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1716,
            "description": "returns an array with all the components in the scene and scenenodes that matches this class",
            "itemtype": "method",
            "name": "findNodeComponents",
            "params": [
                {
                    "name": "type",
                    "description": "the type of the components to search (could be a string with the name or the class itself)",
                    "type": "String||Component"
                }
            ],
            "return": {
                "description": "array with the components found",
                "type": "Array"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1749,
            "description": "Allows to instantiate a prefab from the fullpath of the resource",
            "itemtype": "method",
            "name": "instantiate",
            "params": [
                {
                    "name": "prefab_url",
                    "description": "the filename to the resource containing the prefab",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "where to instantiate",
                    "type": "Vec3"
                },
                {
                    "name": "rotation",
                    "description": "the orientation",
                    "type": "Quat"
                },
                {
                    "name": "parent",
                    "description": "[optional] if no parent then scene.root will be used",
                    "type": "SceneNode"
                }
            ],
            "return": {
                "description": "the resulting prefab node",
                "type": "SceneNode"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1778,
            "description": "returns a pack containing all the scene and resources, used to save a scene to harddrive",
            "itemtype": "method",
            "name": "toPack",
            "params": [
                {
                    "name": "fullpath",
                    "description": "a given fullpath name, it will be assigned to the scene with the appropiate extension",
                    "type": "String"
                },
                {
                    "name": "resources",
                    "description": "[optional] array with all the resources to add, if no array is given it will get the active resources in this scene",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the pack",
                "type": "LS.Pack"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1886,
            "description": "Creates and returns an scene animation track",
            "itemtype": "method",
            "name": "createAnimation",
            "return": {
                "description": "the animation track",
                "type": "LS.Animation"
            },
            "class": "LS.SceneTree",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 50,
            "itemtype": "event",
            "name": "transformChanged",
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 92,
            "description": "changes the node name",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "new_name",
                    "description": "the new name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns true if the name changed",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 261,
            "description": "Node changed name",
            "itemtype": "event",
            "name": "name_changed",
            "params": [
                {
                    "name": "new_name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 279,
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 306,
            "description": "Destroys this node",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "time",
                    "description": "[optional] time in seconds to wait till destroying the node",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 328,
            "description": "Returns the locator string of this node",
            "itemtype": "method",
            "name": "getLocator",
            "params": [
                {
                    "name": "property_name",
                    "description": "[optional] you can pass the name of a property in this node to get the locator of that one",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the locator string of this node",
                "type": "String"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 341,
            "description": "Returns and object with info about a property given a locator",
            "itemtype": "method",
            "name": "getPropertyInfo",
            "params": [
                {
                    "name": "locator",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "object with { node, target, name, value and type }",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 353,
            "description": "Returns and object with info about a property given a locator in path format",
            "itemtype": "method",
            "name": "getPropertyInfoFromPath",
            "params": [
                {
                    "name": "path",
                    "description": "a locator in path format (split by /)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "object with { node, target, name, value and type }",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 473,
            "description": "Returns the value of a property given a locator in string format",
            "itemtype": "method",
            "name": "getPropertyValue",
            "params": [
                {
                    "name": "locaator",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the value of that property",
                "type": "*"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 485,
            "description": "Returns the value of a property given a locator in path format",
            "itemtype": "method",
            "name": "getPropertyValueFromPath",
            "params": [
                {
                    "name": "locator",
                    "description": "in path format (array)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the value of that property",
                "type": "*"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 589,
            "description": "assigns a value to a property given the locator for that property",
            "itemtype": "method",
            "name": "setPropertyValue",
            "params": [
                {
                    "name": "locator",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 601,
            "description": "given a locator in path mode (array) and a value, it searches for the corresponding value and applies it",
            "itemtype": "method",
            "name": "setPropertyValueFromPath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "optional",
                    "description": "offset used to skip the firsst positions in the array",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 697,
            "description": "Returns all the resources used by this node and its components (you can include the resources from the children too)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "res",
                    "description": "object where to store the resources used (in \"res_name\":LS.TYPE format)",
                    "type": "Object"
                },
                {
                    "name": "include_children",
                    "description": "if you want to add also the resources used by the children nodes",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the same object passed is returned",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 772,
            "description": "Allows to load some kind of resource and associate it to this node.\nIt can be for prefabs, meshes, scenes from daes, etc",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 793,
            "description": "Assign a resource/element inteligently to a node: if it is a mesh it creates a MeshRenderer, if it is a Material it assigns it, if it is an animation creates a PlayAnimation, if it is a prefab assigns the prefab. etc",
            "itemtype": "method",
            "name": "assign",
            "params": [
                {
                    "name": "resource",
                    "description": "the resource to assign (it also accepts a resource filename that has been previously loaded).",
                    "type": "*"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 858,
            "description": "Simple way to assign a mesh to a node, it created a MeshRenderer component or reuses and existing one and assigns the mesh",
            "itemtype": "method",
            "name": "setMesh",
            "params": [
                {
                    "name": "mesh_name",
                    "description": "the name of the mesh (path to the file)",
                    "type": "String"
                },
                {
                    "name": "submesh_id",
                    "description": "if you want to assign a submesh",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 888,
            "description": "Apply prefab info (skipping the root components) to node, so all children will be removed and components lost and overwritten\nIt is called from prefab.applyToNodes when a prefab is loaded in memory",
            "itemtype": "method",
            "name": "reloadFromPrefab",
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 924,
            "description": "Assigns this node to one layer",
            "itemtype": "method",
            "name": "setLayer",
            "params": [
                {
                    "name": "the",
                    "description": "index of the layer or the name (according to scene.layer_names)",
                    "type": "Number|String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 957,
            "description": "checks if this node is in the given layer",
            "itemtype": "method",
            "name": "isInLayer",
            "params": [
                {
                    "name": "index",
                    "description": "of layer or name according to scene.layer_names",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "true if belongs to this layer",
                "type": "Boolean"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 1001,
            "description": "Returns the root node of the prefab incase it is inside a prefab, otherwise null",
            "itemtype": "method",
            "name": "insidePrefab",
            "return": {
                "description": "returns the node where the prefab starts",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 1018,
            "description": "remember clones this node and returns the new copy (you need to add it to the scene to see it)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "returns a cloned version of this node",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 1040,
            "description": "Configure this node from an object containing the info",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "info",
                    "description": "the object with all the info (comes from the serialize method)",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 1208,
            "description": "Serializes this node by creating an object with all the info\nit contains info about the components too",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "ignore_prefab",
                    "description": "serializing wont returns children if it is a prefab, if you set this to ignore_prefab it will return all the info",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "returns the object with the info",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 33,
            "description": "Initializes the shader manager",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "url",
                    "description": "a url to a shaders.xml can be specified to load the shaders",
                    "type": "String"
                }
            ],
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 69,
            "description": "Reloads the XML file with the shaders, useful when editing the file",
            "itemtype": "method",
            "name": "reloadShaders",
            "params": [
                {
                    "name": "on_complete",
                    "description": "call when the shaders have been reloaded",
                    "type": "Function"
                }
            ],
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 80,
            "description": "Resolves a shader query, returns the shader",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "query",
                    "description": "",
                    "type": "ShaderQuery"
                }
            ],
            "return": {
                "description": "the shader, if not found the default shader is returned",
                "type": "GL.Shader"
            },
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 92,
            "description": "Clears all the compiled shaders",
            "itemtype": "method",
            "name": "clearCache",
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 103,
            "description": "Returns a compiled shader with this id and this macros",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "macros",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the shader, if not found the default shader is returned",
                "type": "GL.Shader"
            },
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 193,
            "description": "Returns the info of a global shader",
            "itemtype": "method",
            "name": "getGlobalShaderInfo",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shader info (code, macros supported, flags)",
                "type": "Object"
            },
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 205,
            "description": "Compiles a shader, the vertex and fragment shader are cached indepently to speed up compilations but a unique name must be provided",
            "itemtype": "method",
            "name": "compileShader",
            "params": [
                {
                    "name": "vs_code",
                    "description": "the final source code for the vertex shader",
                    "type": "String"
                },
                {
                    "name": "fs_code",
                    "description": "the final source code for the fragment shader",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "an unique name that should be associated with this shader",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shader",
                "type": "GL.Shader"
            },
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 277,
            "description": "Stores a compiled shader program, so it can be reused",
            "itemtype": "method",
            "name": "registerCompiledShader",
            "params": [
                {
                    "name": "shader",
                    "description": "the compiled shader",
                    "type": "GL.Shader"
                },
                {
                    "name": "key",
                    "description": "unique id",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the shader name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shader",
                "type": "GL.Shader"
            },
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 300,
            "description": "Loads shaders code from an XML file",
            "itemtype": "method",
            "name": "loadFromXML",
            "params": [
                {
                    "name": "url",
                    "description": "to the shaders file",
                    "type": "String"
                },
                {
                    "name": "reset_old",
                    "description": "to reset all the existing shaders once loaded",
                    "type": "Boolean"
                },
                {
                    "name": "ignore_cache",
                    "description": "force to ignore web cache",
                    "type": "Boolean"
                },
                {
                    "name": "on_complete",
                    "description": "callback once the file has been loaded and processed",
                    "type": "Function"
                }
            ],
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 334,
            "description": "extracts all the shaders from the XML doc",
            "itemtype": "method",
            "name": "processShadersXML",
            "params": [
                {
                    "name": "xml",
                    "description": "",
                    "type": "XMLDocument"
                }
            ],
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 436,
            "description": "extracts all the shaders from the XML doc",
            "itemtype": "method",
            "name": "registerGlobalShader",
            "params": [
                {
                    "name": "vs_code",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fs_code",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 533,
            "description": "Register a code snippet ready to be used by the #import clause in the shader",
            "itemtype": "method",
            "name": "registerSnippet",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 545,
            "description": "Returns the code of a snipper",
            "itemtype": "method",
            "name": "getSnippet",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "code",
                "type": "String"
            },
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 595,
            "description": "Create some default shaders useful for generic situations (flat, texture and screenspace quad)",
            "itemtype": "method",
            "name": "createDefaultShaders",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "code",
                "type": "String"
            },
            "class": "LS.ShadersManager",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/utils.js",
            "line": 1,
            "description": "Samples a curve and returns the resulting value",
            "itemtype": "method",
            "name": "getCurveValueAt",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "the position in the curve to sample",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "",
            "module": "LS",
            "namespace": "LS"
        },
        {
            "file": "../src/utils.js",
            "line": 37,
            "description": "Resamples a full curve in values (useful to upload to GPU array)",
            "itemtype": "method",
            "name": "resampleCurve",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "numsamples",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "",
            "module": "LS",
            "namespace": "LS"
        }
    ],
    "warnings": []
}